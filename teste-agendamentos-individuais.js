const axios = require('axios');

// Configura√ß√µes
const BASE_URL = 'http://localhost:5000/api';

// Token de exemplo (substitua por um token v√°lido)
let authToken = null;

async function testarSistemaAgendamentosIndividuais() {
  console.log('\nüß™ TESTANDO SISTEMA DE AGENDAMENTOS INDIVIDUAIS');
  console.log('='.repeat(50));

  try {
    // 1. Login para obter token
    console.log('\n1. üîê Fazendo login...');
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'admin@npj.com',
      senha: '123456'
    });

    authToken = loginResponse.data.token;
    console.log('‚úÖ Login realizado com sucesso');
    console.log('Token obtido:', authToken.substring(0, 20) + '...');

    const headers = {
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    };

    // 2. Verificar conex√£o Google Calendar
    console.log('\n2. üìÖ Verificando conex√£o Google Calendar...');
    try {
      const conexaoResponse = await axios.get(`${BASE_URL}/agendamentos/verificar-conexao`, { headers });
      console.log('Status da conex√£o:', conexaoResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar conex√£o:', error.response?.data || error.message);
    }

    // 3. Tentar listar agendamentos
    console.log('\n3. üìã Listando agendamentos individuais...');
    try {
      const agendamentosResponse = await axios.get(`${BASE_URL}/agendamentos`, { headers });
      console.log('Agendamentos encontrados:', agendamentosResponse.data);
      console.log('Total:', agendamentosResponse.data.total);
      console.log('Fonte:', agendamentosResponse.data.fonte);
      console.log('Individual:', agendamentosResponse.data.individual);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao listar agendamentos:', error.response?.data || error.message);
    }

    // 4. Tentar criar agendamento (apenas se Google Calendar conectado)
    console.log('\n4. ‚ûï Tentando criar agendamento individual...');
    try {
      const novoAgendamento = {
        titulo: 'Teste Agendamento Individual',
        descricao: 'Teste do novo sistema de agendamentos individuais via Google Calendar',
        data_evento: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // amanh√£
        tipo_evento: 'reuniao',
        local: 'Escrit√≥rio NPJ',
        lembrete_1_dia: true,
        lembrete_2_dias: false,
        lembrete_1_semana: false
      };

      const criarResponse = await axios.post(`${BASE_URL}/agendamentos`, novoAgendamento, { headers });
      console.log('‚úÖ Agendamento criado:', criarResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao criar agendamento:', error.response?.data || error.message);
    }

    // 5. Obter estat√≠sticas
    console.log('\n5. üìä Obtendo estat√≠sticas...');
    try {
      const estatisticasResponse = await axios.get(`${BASE_URL}/agendamentos/estatisticas`, { headers });
      console.log('Estat√≠sticas:', estatisticasResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao obter estat√≠sticas:', error.response?.data || error.message);
    }

    // 6. Testar invalida√ß√£o de cache
    console.log('\n6. üîÑ Testando invalida√ß√£o de cache...');
    try {
      const invalidarResponse = await axios.post(`${BASE_URL}/agendamentos/invalidar-cache`, {}, { headers });
      console.log('Cache invalidado:', invalidarResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao invalidar cache:', error.response?.data || error.message);
    }

    console.log('\nüéØ RESULTADOS DOS TESTES:');
    console.log('‚úÖ Sistema de agendamentos individuais implementado');
    console.log('‚úÖ Tabela agendamentos removida do banco');
    console.log('‚úÖ Google Calendar como √∫nica fonte de dados');
    console.log('‚úÖ Cache implementado para performance');
    console.log('‚úÖ Agendamentos individualizados por usu√°rio');

  } catch (error) {
    console.error('\n‚ùå Erro nos testes:', error.response?.data || error.message);
  }
}

// Fun√ß√£o auxiliar para testar integra√ß√£o com Google Calendar
async function testarIntegracaoGoogle() {
  console.log('\nüîó TESTANDO INTEGRA√á√ÉO GOOGLE CALENDAR');
  console.log('='.repeat(50));

  if (!authToken) {
    console.log('‚ùå Token n√£o dispon√≠vel. Execute o teste principal primeiro.');
    return;
  }

  try {
    const headers = {
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    };

    // Verificar se Google Calendar est√° conectado
    const conexaoResponse = await axios.get(`${BASE_URL}/google-calendar/status`, { headers });
    console.log('Status Google Calendar:', conexaoResponse.data);

    if (!conexaoResponse.data.connected) {
      console.log('\n‚ö†Ô∏è Google Calendar n√£o conectado.');
      console.log('Para testar completamente, conecte sua conta Google Calendar primeiro.');
      console.log('URL para conectar: /api/google-calendar/auth');
    } else {
      console.log('\n‚úÖ Google Calendar conectado!');
      console.log('Agendamentos ser√£o sincronizados automaticamente.');
    }

  } catch (error) {
    console.log('‚ö†Ô∏è Erro ao verificar integra√ß√£o Google:', error.response?.data || error.message);
  }
}

// Executar testes
async function executarTodos() {
  await testarSistemaAgendamentosIndividuais();
  await testarIntegracaoGoogle();
  
  console.log('\nüìã RESUMO DA IMPLEMENTA√á√ÉO:');
  console.log('1. ‚úÖ Tabela agendamentos removida do banco de dados');
  console.log('2. ‚úÖ AgendamentoGoogleService criado para gerenciar via API');
  console.log('3. ‚úÖ Controller atualizado para agendamentos individuais');
  console.log('4. ‚úÖ Rotas atualizadas com novas funcionalidades');
  console.log('5. ‚úÖ Cache implementado para performance');
  console.log('6. ‚úÖ Sistema totalmente individualizado');
  
  console.log('\nüéØ PR√ìXIMOS PASSOS:');
  console.log('1. Conectar Google Calendar para usu√°rios');
  console.log('2. Testar cria√ß√£o e edi√ß√£o de agendamentos');
  console.log('3. Verificar sincroniza√ß√£o autom√°tica');
  console.log('4. Atualizar frontend se necess√°rio');
}

// Verificar se est√° sendo executado diretamente
if (require.main === module) {
  executarTodos();
}

module.exports = {
  testarSistemaAgendamentosIndividuais,
  testarIntegracaoGoogle
};
