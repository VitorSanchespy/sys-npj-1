/**
 * Teste manual dos cron jobs do sistema de eventos
 */

async function testeCronJobs() {
  console.log('üîÑ TESTE MANUAL DOS CRON JOBS');
  console.log('=' .repeat(50));

  try {
    // Importar servi√ßos necess√°rios
    const eventService = require('./backend/services/eventService');
    const eventNotificationService = require('./backend/services/eventNotificationService');
    
    console.log('\n1Ô∏è‚É£ Testando busca de eventos para hoje...');
    const todayEvents = await eventService.getTodayApprovedEvents();
    console.log('‚úÖ Eventos de hoje:', todayEvents.length);

    console.log('\n2Ô∏è‚É£ Testando busca de eventos que come√ßam em breve...');
    const upcomingEvents = await eventService.getEventsStartingInAnHour();
    console.log('‚úÖ Eventos come√ßando em breve:', upcomingEvents.length);

    console.log('\n3Ô∏è‚É£ Testando marca√ß√£o de eventos como completos...');
    const completedCount = await eventService.markEventsAsCompleted();
    console.log('‚úÖ Eventos marcados como completos:', completedCount);

    console.log('\n4Ô∏è‚É£ Testando template de notifica√ß√£o...');
    const mockEvent = {
      id: 1,
      title: 'Evento de Teste',
      start_at: new Date(),
      end_at: new Date(Date.now() + 3600000),
      description: 'Descri√ß√£o do evento',
      requester: {
        nome: 'Admin',
        email: 'admin@teste.com'
      },
      participants: []
    };

    const mockUser = {
      nome: 'Admin',
      email: 'admin@teste.com'
    };

    const template = eventNotificationService.getApprovalRequestTemplate(mockEvent, mockUser);
    console.log('‚úÖ Template gerado com sucesso');
    console.log('üìß Assunto:', template.subject);

    console.log('\nüéâ TODOS OS TESTES DE CRON JOBS PASSARAM!');
    console.log('‚úÖ Sistema de cron jobs est√° funcionando');

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE DE CRON JOBS:', error.message);
    console.error('üîç Stack:', error.stack);
  }
}

testeCronJobs();
