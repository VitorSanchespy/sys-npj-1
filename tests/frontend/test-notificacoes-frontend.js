/**
 * TESTE AUTOMATIZADO - SISTEMA DE NOTIFICA√á√ïES FRONTEND
 * ======================================================
 * 
 * Testa toda a integra√ß√£o do sistema de notifica√ß√µes frontend com backend
 * Inclui: autentica√ß√£o, busca de notifica√ß√µes, marca√ß√£o como lida, estat√≠sticas
 */

const api = 'http://localhost:3001';

// Helper para fazer requisi√ß√µes
async function makeRequest(url, options = {}) {
    try {
        const response = await fetch(url, {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        return await response.json();
    } catch (error) {
        console.error(`‚ùå Erro na requisi√ß√£o ${url}:`, error.message);
        throw error;
    }
}

// 1. Teste de Autentica√ß√£o
async function testarAutenticacao() {
    console.log('üîê TESTANDO AUTENTICA√á√ÉO...');
    try {
        const result = await makeRequest(`${api}/auth/login`, {
            method: 'POST',
            body: JSON.stringify({
                email: 'admin@teste.com',
                senha: '123456'
            })
        });
        
        console.log('‚úÖ Login realizado com sucesso');
        console.log(`üîë Token: ${result.token.substring(0, 20)}...`);
        return result.token;
    } catch (error) {
        console.log('‚ùå Falha no login:', error.message);
        throw error;
    }
}

// 2. Teste de Busca de Notifica√ß√µes
async function testarBuscaNotificacoes(token) {
    console.log('\nüìã TESTANDO BUSCA DE NOTIFICA√á√ïES...');
    try {
        const result = await makeRequest(`${api}/api/notificacoes`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log(`‚úÖ ${result.notificacoes.length} notifica√ß√µes encontradas`);
        console.log(`üìä Total: ${result.total} | N√£o lidas: ${result.naoLidas}`);
        
        if (result.notificacoes.length > 0) {
            const primeira = result.notificacoes[0];
            console.log(`üìù Primeira: "${primeira.titulo}" - ${primeira.tipo}`);
        }
        
        return result;
    } catch (error) {
        console.log('‚ùå Falha ao buscar notifica√ß√µes:', error.message);
        throw error;
    }
}

// 3. Teste de Contagem de N√£o Lidas
async function testarContagemNaoLidas(token) {
    console.log('\nüî¢ TESTANDO CONTAGEM DE N√ÉO LIDAS...');
    try {
        const result = await makeRequest(`${api}/api/notificacoes/nao-lidas/contador`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log(`‚úÖ ${result.count} notifica√ß√µes n√£o lidas`);
        return result.count;
    } catch (error) {
        console.log('‚ùå Falha ao contar n√£o lidas:', error.message);
        throw error;
    }
}

// 4. Teste de Configura√ß√µes de Notifica√ß√£o
async function testarConfiguracoes(token) {
    console.log('\n‚öôÔ∏è TESTANDO CONFIGURA√á√ïES...');
    try {
        const result = await makeRequest(`${api}/api/notificacoes/configuracoes`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log('‚úÖ Configura√ß√µes obtidas:');
        console.log(`üìß Email lembretes: ${result.configuracao.email_lembretes ? 'Ativo' : 'Inativo'}`);
        console.log(`üîî Push lembretes: ${result.configuracao.push_lembretes ? 'Ativo' : 'Inativo'}`);
        console.log(`üì± Email alertas: ${result.configuracao.email_alertas ? 'Ativo' : 'Inativo'}`);
        
        return result;
    } catch (error) {
        console.log('‚ùå Falha ao buscar configura√ß√µes:', error.message);
        throw error;
    }
}

// 5. Teste de Marca√ß√£o como Lida
async function testarMarcarComoLida(token, notificacoes) {
    if (!notificacoes || notificacoes.length === 0) {
        console.log('\n‚ö†Ô∏è Nenhuma notifica√ß√£o para testar marca√ß√£o como lida');
        return;
    }
    
    console.log('\n‚úì TESTANDO MARCA√á√ÉO COMO LIDA...');
    try {
        const primeira = notificacoes[0];
        const result = await makeRequest(`${api}/api/notificacoes/${primeira.id}/lida`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log(`‚úÖ Notifica√ß√£o ${primeira.id} marcada como lida`);
        return result;
    } catch (error) {
        console.log('‚ùå Falha ao marcar como lida:', error.message);
        throw error;
    }
}

// 6. Teste de Cria√ß√£o de Nova Notifica√ß√£o (via cria√ß√£o de usu√°rio)
async function testarCriacaoNotificacao(token) {
    console.log('\nüë§ TESTANDO CRIA√á√ÉO DE NOTIFICA√á√ÉO (VIA NOVO USU√ÅRIO)...');
    try {
        const timestamp = Date.now();
        const result = await makeRequest(`${api}/api/usuarios`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                nome: 'Teste Notifica√ß√µes Frontend',
                email: `teste.frontend.${timestamp}@teste.com`,
                senha: '123456',
                telefone: '(11) 99999-9999',
                role_id: 1
            })
        });
        
        console.log(`‚úÖ Usu√°rio criado: ${result.nome} (${result.email})`);
        console.log('üì¨ Notifica√ß√£o de cria√ß√£o deve ter sido gerada');
        
        return result;
    } catch (error) {
        console.log('‚ùå Falha ao criar usu√°rio:', error.message);
        throw error;
    }
}

// 7. Teste Completo do Sistema
async function executarTestesCompletos() {
    console.log('üöÄ INICIANDO TESTES DO SISTEMA DE NOTIFICA√á√ïES FRONTEND');
    console.log('=========================================================\n');
    
    const resultados = {
        autenticacao: false,
        buscaNotificacoes: false,
        contagemNaoLidas: false,
        configuracoes: false,
        marcarComoLida: false,
        criacaoNotificacao: false
    };
    
    try {
        // 1. Autentica√ß√£o
        const token = await testarAutenticacao();
        resultados.autenticacao = true;
        
        // 2. Busca inicial de notifica√ß√µes
        const dadosNotificacoes = await testarBuscaNotificacoes(token);
        resultados.buscaNotificacoes = true;
        
        // 3. Contagem de n√£o lidas
        await testarContagemNaoLidas(token);
        resultados.contagemNaoLidas = true;
        
        // 4. Configura√ß√µes
        await testarConfiguracoes(token);
        resultados.configuracoes = true;
        
        // 5. Marca√ß√£o como lida
        await testarMarcarComoLida(token, dadosNotificacoes.notificacoes);
        resultados.marcarComoLida = true;
        
        // 6. Cria√ß√£o de nova notifica√ß√£o
        await testarCriacaoNotificacao(token);
        resultados.criacaoNotificacao = true;
        
        // 7. Busca final para verificar nova notifica√ß√£o
        console.log('\nüîÑ VERIFICANDO NOVA NOTIFICA√á√ÉO...');
        await testarBuscaNotificacoes(token);
        
    } catch (error) {
        console.log('\nüí• ERRO CR√çTICO:', error.message);
    }
    
    // Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL DOS TESTES');
    console.log('===============================');
    
    const testes = Object.keys(resultados);
    const passou = testes.filter(teste => resultados[teste]).length;
    const total = testes.length;
    
    testes.forEach(teste => {
        const status = resultados[teste] ? '‚úÖ' : '‚ùå';
        const nome = teste.replace(/([A-Z])/g, ' $1').toLowerCase();
        console.log(`${status} ${nome}`);
    });
    
    console.log(`\nüéØ RESULTADO: ${passou}/${total} testes passaram (${Math.round(passou/total*100)}%)`);
    
    if (passou === total) {
        console.log('üéâ TODOS OS TESTES PASSARAM! Sistema funcionando perfeitamente.');
    } else {
        console.log('‚ö†Ô∏è ALGUNS TESTES FALHARAM. Verificar implementa√ß√£o.');
    }
}

// Executar testes se chamado diretamente
if (typeof window === 'undefined' && typeof require !== 'undefined') {
    // Node.js environment
    const fetch = require('node-fetch');
    executarTestesCompletos().catch(console.error);
} else {
    // Browser environment
    window.testarNotificacoesFrontend = executarTestesCompletos;
    console.log('‚úÖ Testes carregados. Execute: testarNotificacoesFrontend()');
}
