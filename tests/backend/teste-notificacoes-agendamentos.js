/**
 * Teste completo do sistema de agendamentos com notifica√ß√µes
 * Verifica se as notifica√ß√µes s√£o enviadas corretamente para todos os cen√°rios
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

// Credenciais de teste
const usuarios = {
    admin: { email: 'admin@teste.com', senha: 'admin123' },
    professor: { email: 'joao@teste.com', senha: 'joao123' },
    aluno: { email: 'maria@teste.com', senha: 'maria123' }
};

// IDs dos usu√°rios (ser√£o obtidos ap√≥s login)
let userIds = {};

async function login(usuario, role) {
    try {
        const response = await axios.post(`${BASE_URL}/auth/login`, usuario);
        console.log(`‚úÖ Login realizado para ${role}: ${usuario.email}`);
        return {
            token: response.data.token,
            user: response.data.user
        };
    } catch (error) {
        console.error(`‚ùå Erro ao fazer login para ${role}:`, error.response?.data?.erro || error.message);
        return null;
    }
}

async function criarAgendamento(token, nomeUsuario, agendamento) {
    try {
        const response = await axios.post(`${BASE_URL}/api/agendamentos`, agendamento, {
            headers: { Authorization: `Bearer ${token}` }
        });
        console.log(`\n‚úÖ ${nomeUsuario} criou agendamento: ${agendamento.titulo}`);
        console.log(`   üìß Notifica√ß√µes devem ter sido enviadas automaticamente`);
        return response.data;
    } catch (error) {
        console.error(`\n‚ùå ${nomeUsuario} n√£o conseguiu criar agendamento:`, error.response?.data?.erro || error.message);
        return null;
    }
}

async function atualizarAgendamento(token, nomeUsuario, agendamentoId, dadosAtualizacao) {
    try {
        const response = await axios.put(`${BASE_URL}/api/agendamentos/${agendamentoId}`, dadosAtualizacao, {
            headers: { Authorization: `Bearer ${token}` }
        });
        console.log(`\n‚úÖ ${nomeUsuario} atualizou agendamento ID ${agendamentoId}`);
        console.log(`   üìß Notifica√ß√µes de atualiza√ß√£o devem ter sido enviadas`);
        return response.data;
    } catch (error) {
        console.error(`\n‚ùå ${nomeUsuario} n√£o conseguiu atualizar agendamento:`, error.response?.data?.erro || error.message);
        return null;
    }
}

async function cancelarAgendamento(token, nomeUsuario, agendamentoId, motivo = '') {
    try {
        await axios.delete(`${BASE_URL}/api/agendamentos/${agendamentoId}`, {
            headers: { Authorization: `Bearer ${token}` },
            data: { motivo }
        });
        console.log(`\n‚úÖ ${nomeUsuario} cancelou agendamento ID ${agendamentoId}`);
        if (motivo) console.log(`   üìù Motivo: ${motivo}`);
        console.log(`   üìß Notifica√ß√µes de cancelamento devem ter sido enviadas`);
        return true;
    } catch (error) {
        console.error(`\n‚ùå ${nomeUsuario} n√£o conseguiu cancelar agendamento:`, error.response?.data?.erro || error.message);
        return false;
    }
}

async function listarNotificacoes(token, nomeUsuario) {
    try {
        const response = await axios.get(`${BASE_URL}/api/notificacoes`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        console.log(`\nüì¨ Notifica√ß√µes para ${nomeUsuario}: ${response.data.length}`);
        
        response.data.slice(0, 3).forEach((notif, index) => {
            console.log(`   ${index + 1}. ${notif.titulo}: ${notif.mensagem}`);
        });
        
        return response.data;
    } catch (error) {
        console.error(`‚ùå Erro ao listar notifica√ß√µes para ${nomeUsuario}:`, error.response?.data?.erro || error.message);
        return [];
    }
}

async function testarSistemaNotificacoes() {
    console.log('üîî TESTANDO SISTEMA DE NOTIFICA√á√ïES DE AGENDAMENTOS');
    console.log('=' .repeat(70));

    // 1. Fazer login com todos os usu√°rios
    console.log('\n1Ô∏è‚É£ Fazendo login com todos os usu√°rios...');
    const sessions = {};
    
    for (const [role, credenciais] of Object.entries(usuarios)) {
        const session = await login(credenciais, role);
        if (session) {
            sessions[role] = session;
            userIds[role] = session.user.id;
            console.log(`   ID do ${role}: ${session.user.id}`);
        } else {
            console.error(`‚ùå Falha no login para ${role}. Teste abortado.`);
            return;
        }
    }

    console.log('\n' + '‚îÄ'.repeat(70));

    // 2. Cen√°rio 1: Professor criando agendamento para aluno
    console.log('\n2Ô∏è‚É£ CEN√ÅRIO 1: Professor criando agendamento para aluno');
    console.log('   üìß Esperado: Aluno recebe notifica√ß√£o, Professor recebe confirma√ß√£o');
    
    const agendamento1 = await criarAgendamento(sessions.professor.token, 'Professor', {
        usuario_id: userIds.aluno, // Para o aluno
        tipo_evento: 'reuniao',
        titulo: 'Orienta√ß√£o de TCC - Notifica√ß√£o Teste',
        descricao: 'Reuni√£o para discutir o desenvolvimento do TCC',
        data_evento: '2025-08-15T14:00:00Z',
        local: 'Sala do Professor',
        lembrete_1_dia: true,
        lembrete_2_dias: true,
        lembrete_1_semana: false
    });

    if (agendamento1) {
        console.log(`   üìã Agendamento criado com ID: ${agendamento1.id}`);
    }

    console.log('\n' + '‚îÄ'.repeat(70));

    // 3. Cen√°rio 2: Admin criando agendamento para si mesmo
    console.log('\n3Ô∏è‚É£ CEN√ÅRIO 2: Admin criando agendamento para si mesmo');
    console.log('   üìß Esperado: Admin recebe apenas confirma√ß√£o');
    
    const agendamento2 = await criarAgendamento(sessions.admin.token, 'Admin', {
        tipo_evento: 'reuniao',
        titulo: 'Reuni√£o Administrativa - Auto Agendamento',
        descricao: 'Reuni√£o de planejamento mensal',
        data_evento: '2025-08-20T10:00:00Z',
        local: 'Sala da Coordena√ß√£o',
        lembrete_1_dia: true
    });

    if (agendamento2) {
        console.log(`   üìã Agendamento criado com ID: ${agendamento2.id}`);
    }

    console.log('\n' + '‚îÄ'.repeat(70));

    // 4. Cen√°rio 3: Aluno tentando criar para professor (deve falhar)
    console.log('\n4Ô∏è‚É£ CEN√ÅRIO 3: Aluno tentando criar agendamento para professor');
    console.log('   ‚ùå Esperado: Falha na cria√ß√£o (regra de neg√≥cio)');
    
    await criarAgendamento(sessions.aluno.token, 'Aluno', {
        usuario_id: userIds.professor, // Para o professor (deve falhar)
        tipo_evento: 'reuniao',
        titulo: 'Tentativa Inv√°lida',
        descricao: 'Aluno tentando criar para professor',
        data_evento: '2025-08-25T15:00:00Z',
        local: 'Qualquer lugar'
    });

    console.log('\n' + '‚îÄ'.repeat(70));

    // 5. Cen√°rio 4: Atualiza√ß√£o de agendamento
    if (agendamento1) {
        console.log('\n5Ô∏è‚É£ CEN√ÅRIO 4: Professor atualizando agendamento');
        console.log('   üìß Esperado: Aluno recebe notifica√ß√£o de atualiza√ß√£o');
        
        await atualizarAgendamento(sessions.professor.token, 'Professor', agendamento1.id, {
            titulo: 'Orienta√ß√£o de TCC - ATUALIZADO',
            data_evento: '2025-08-15T15:00:00Z', // Hor√°rio alterado
            local: 'Sala 202 - Local Atualizado'
        });
    }

    console.log('\n' + '‚îÄ'.repeat(70));

    // 6. Aguardar um pouco para processamento das notifica√ß√µes
    console.log('\n6Ô∏è‚É£ Aguardando processamento das notifica√ß√µes...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 7. Verificar notifica√ß√µes recebidas
    console.log('\n7Ô∏è‚É£ VERIFICANDO NOTIFICA√á√ïES RECEBIDAS:');
    
    for (const [role, session] of Object.entries(sessions)) {
        await listarNotificacoes(session.token, role.charAt(0).toUpperCase() + role.slice(1));
    }

    console.log('\n' + '‚îÄ'.repeat(70));

    // 8. Cen√°rio 5: Cancelamento de agendamento
    if (agendamento1) {
        console.log('\n8Ô∏è‚É£ CEN√ÅRIO 5: Professor cancelando agendamento');
        console.log('   üìß Esperado: Aluno recebe notifica√ß√£o de cancelamento');
        
        await cancelarAgendamento(
            sessions.professor.token, 
            'Professor', 
            agendamento1.id,
            'Conflito de hor√°rio - reagendamento necess√°rio'
        );
    }

    console.log('\n' + '‚îÄ'.repeat(70));

    // 9. Limpeza: cancelar agendamento restante
    if (agendamento2) {
        console.log('\n9Ô∏è‚É£ LIMPEZA: Cancelando agendamento do admin');
        await cancelarAgendamento(sessions.admin.token, 'Admin', agendamento2.id, 'Teste finalizado');
    }

    // 10. Verifica√ß√£o final das notifica√ß√µes
    console.log('\nüîü VERIFICA√á√ÉO FINAL DAS NOTIFICA√á√ïES:');
    
    for (const [role, session] of Object.entries(sessions)) {
        await listarNotificacoes(session.token, role.charAt(0).toUpperCase() + role.slice(1));
    }

    console.log('\n' + 'üéâ'.repeat(35));
    console.log('\n‚úÖ TESTE DE NOTIFICA√á√ïES CONCLU√çDO!');
    console.log('\nüìã RESUMO DO QUE FOI TESTADO:');
    console.log('   ‚úì Cria√ß√£o de agendamento com notifica√ß√£o ao destinat√°rio');
    console.log('   ‚úì Confirma√ß√£o ao criador do agendamento');
    console.log('   ‚úì Valida√ß√£o de regras de neg√≥cio (aluno n√£o pode criar para professor)');
    console.log('   ‚úì Notifica√ß√µes de atualiza√ß√£o de agendamentos');
    console.log('   ‚úì Notifica√ß√µes de cancelamento com motivo');
    console.log('   ‚úì Diferentes tipos de usu√°rios (Admin, Professor, Aluno)');
    
    console.log('\nüìß VERIFIQUE TAMB√âM:');
    console.log('   ‚Ä¢ Se configurado, emails devem ter sido enviados');
    console.log('   ‚Ä¢ Notifica√ß√µes em tempo real (WebSocket)');
    console.log('   ‚Ä¢ Logs no backend com detalhes das notifica√ß√µes');
}

// Executar teste
if (require.main === module) {
    testarSistemaNotificacoes().catch(console.error);
}

module.exports = { testarSistemaNotificacoes };
