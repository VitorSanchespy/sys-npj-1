// Testes para o sistema de notifica√ß√µes do frontend
const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

// Credenciais de teste
const testUsers = [
  { email: 'admin@teste.com', senha: 'admin123' },
  { email: 'professor@teste.com', senha: 'prof123' },
  { email: 'aluno@teste.com', senha: 'aluno123' }
];

let sessions = {};

// Fun√ß√£o para fazer login
async function login(credentials) {
  try {
    const response = await axios.post(`${BASE_URL}/auth/login`, credentials);
    console.log(`‚úÖ Login realizado: ${credentials.email}`);
    return {
      token: response.data.token,
      user: response.data.user
    };
  } catch (error) {
    console.error(`‚ùå Erro no login ${credentials.email}:`, error.response?.data?.erro || error.message);
    return null;
  }
}

// Fun√ß√£o para testar notifica√ß√µes
async function testarNotificacoes(token, userType) {
  try {
    console.log(`\nüìã Testando notifica√ß√µes para ${userType}:`);
    
    // 1. Listar notifica√ß√µes
    const response = await axios.get(`${BASE_URL}/notificacoes`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log(`   üìß ${response.data.notificacoes?.length || 0} notifica√ß√µes encontradas`);

    // 2. Contar n√£o lidas
    const countResponse = await axios.get(`${BASE_URL}/notificacoes/nao-lidas/contador`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log(`   üîî ${countResponse.data.count} notifica√ß√µes n√£o lidas`);

    // 3. Configura√ß√µes
    const configResponse = await axios.get(`${BASE_URL}/notificacoes/configuracoes`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log(`   ‚öôÔ∏è Configura√ß√µes carregadas:`, configResponse.data.configuracao ? 'OK' : 'Criadas');

    return {
      total: response.data.notificacoes?.length || 0,
      unread: countResponse.data.count,
      hasConfig: !!configResponse.data.configuracao
    };

  } catch (error) {
    console.error(`‚ùå Erro ao testar notifica√ß√µes para ${userType}:`, error.response?.data?.erro || error.message);
    return null;
  }
}

// Fun√ß√£o para testar configura√ß√µes
async function testarConfiguracoes(token, userType) {
  try {
    console.log(`\n‚öôÔ∏è Testando configura√ß√µes para ${userType}:`);
    
    // Atualizar configura√ß√µes
    const novasConfiguracoes = {
      email_lembretes: true,
      email_alertas: false,
      email_agendamentos: true,
      email_processos: true,
      push_lembretes: true,
      push_alertas: true,
      horario_inicio: '09:00',
      horario_fim: '17:00'
    };

    const updateResponse = await axios.put(`${BASE_URL}/notificacoes/configuracoes`, novasConfiguracoes, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log(`   ‚úÖ Configura√ß√µes atualizadas com sucesso`);
    return true;

  } catch (error) {
    console.error(`‚ùå Erro ao testar configura√ß√µes para ${userType}:`, error.response?.data?.erro || error.message);
    return false;
  }
}

// Fun√ß√£o para criar agendamento e gerar notifica√ß√£o
async function criarAgendamentoTeste(token, userType) {
  try {
    console.log(`\nüìÖ Criando agendamento de teste para ${userType}:`);
    
    const novoAgendamento = {
      titulo: `Teste Frontend Notifica√ß√µes - ${userType}`,
      descricao: 'Agendamento criado para testar o sistema de notifica√ß√µes do frontend',
      data_evento: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Amanh√£
      tipo_evento: 'reuniao',
      local: 'Sistema de Testes',
      lembrete_1_dia: true
    };

    const response = await axios.post(`${BASE_URL}/agendamentos`, novoAgendamento, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log(`   ‚úÖ Agendamento criado com ID: ${response.data.id}`);
    
    // Aguardar processamento da notifica√ß√£o
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    return response.data;

  } catch (error) {
    console.error(`‚ùå Erro ao criar agendamento para ${userType}:`, error.response?.data?.erro || error.message);
    return null;
  }
}

// Fun√ß√£o principal de teste
async function testarSistemaNotificacoesFrontend() {
  console.log('üß™ TESTE DO SISTEMA DE NOTIFICA√á√ïES - FRONTEND');
  console.log('=' .repeat(70));

  try {
    // 1. Fazer login com todos os usu√°rios
    console.log('\n1Ô∏è‚É£ Fazendo login com usu√°rios de teste...');
    for (const userCred of testUsers) {
      const session = await login(userCred);
      if (session) {
        const userType = userCred.email.split('@')[0];
        sessions[userType] = session;
      }
    }

    // 2. Testar notifica√ß√µes para cada usu√°rio
    console.log('\n2Ô∏è‚É£ Testando sistema de notifica√ß√µes...');
    const stats = {};
    
    for (const [userType, session] of Object.entries(sessions)) {
      const result = await testarNotificacoes(session.token, userType);
      if (result) {
        stats[userType] = result;
      }
    }

    // 3. Testar configura√ß√µes
    console.log('\n3Ô∏è‚É£ Testando configura√ß√µes de notifica√ß√µes...');
    for (const [userType, session] of Object.entries(sessions)) {
      await testarConfiguracoes(session.token, userType);
    }

    // 4. Criar agendamentos para gerar notifica√ß√µes
    console.log('\n4Ô∏è‚É£ Criando agendamentos para gerar notifica√ß√µes...');
    for (const [userType, session] of Object.entries(sessions)) {
      await criarAgendamentoTeste(session.token, userType);
    }

    // 5. Verificar notifica√ß√µes ap√≥s cria√ß√£o
    console.log('\n5Ô∏è‚É£ Verificando notifica√ß√µes ap√≥s cria√ß√£o de agendamentos...');
    for (const [userType, session] of Object.entries(sessions)) {
      await testarNotificacoes(session.token, userType);
    }

    // Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL:');
    console.log('‚îÄ'.repeat(70));
    console.log('‚úÖ FUNCIONALIDADES TESTADAS:');
    console.log('   ‚úì Listagem de notifica√ß√µes');
    console.log('   ‚úì Contador de n√£o lidas');
    console.log('   ‚úì Configura√ß√µes de notifica√ß√£o');
    console.log('   ‚úì Cria√ß√£o de agendamentos com notifica√ß√µes');
    console.log('   ‚úì API endpoints funcionando');
    
    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('   ‚Ä¢ Testar interface do frontend no navegador');
    console.log('   ‚Ä¢ Verificar sino de notifica√ß√µes no header');
    console.log('   ‚Ä¢ Testar p√°ginas de notifica√ß√µes e configura√ß√µes');
    console.log('   ‚Ä¢ Verificar toasts de notifica√ß√£o em tempo real');
    
    console.log('\nüåê ACESSE:');
    console.log('   ‚Ä¢ Frontend: http://localhost:5173');
    console.log('   ‚Ä¢ P√°gina de Notifica√ß√µes: http://localhost:5173/notificacoes');
    console.log('   ‚Ä¢ Configura√ß√µes: http://localhost:5173/notificacoes/configuracoes');

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }
}

// Executar testes
if (require.main === module) {
  testarSistemaNotificacoesFrontend();
}

module.exports = {
  testarSistemaNotificacoesFrontend,
  testarNotificacoes,
  testarConfiguracoes
};
