// Hook para feedback autom√°tico de APIs - intercepta requisi√ß√µes e mostra toasts
import { toastService } from '../services/toastService';

export const useApiFeedback = () => {

  // Fun√ß√£o para extrair mensagem de erro mais detalhada
  const extractErrorMessage = (error) => {
    if (error?.response?.data?.message) {
      return error.response.data.message;
    }
    if (error?.response?.data?.error) {
      return error.response.data.error;
    }
    if (error?.message) {
      return error.message;
    }
    if (error?.response?.status) {
      switch (error.response.status) {
        case 400:
          return 'Dados inv√°lidos. Verifique as informa√ß√µes enviadas.';
        case 401:
          return 'N√£o autorizado. Fa√ßa login novamente.';
        case 403:
          return 'Acesso negado. Voc√™ n√£o tem permiss√£o para esta a√ß√£o.';
        case 404:
          return 'Recurso n√£o encontrado.';
        case 409:
          return 'Conflito. Dados j√° existem ou est√£o em uso.';
        case 422:
          return 'Dados inv√°lidos. Verifique os campos obrigat√≥rios.';
        case 429:
          return 'Muitas tentativas. Tente novamente em alguns minutos.';
        case 500:
          return 'Erro interno do servidor. Tente novamente mais tarde.';
        default:
          return `Erro ${error.response.status}: ${error.response.statusText}`;
      }
    }
    return 'Erro inesperado. Tente novamente.';
  };

  // Fun√ß√£o para mostrar feedback de sucesso
  const showSuccessFeedback = (message, action = '') => {
    const successMessages = {
      'login': 'üéâ Login realizado com sucesso!',
      'register': '‚úÖ Cadastro realizado com sucesso! Bem-vindo(a)!',
      'logout': 'üëã Logout realizado com sucesso!',
      'create': '‚úÖ Criado com sucesso!',
      'update': '‚úÖ Atualizado com sucesso!',
      'delete': 'üóëÔ∏è Exclu√≠do com sucesso!',
      'upload': 'üìÅ Arquivo enviado com sucesso!',
      'download': '‚¨áÔ∏è Download iniciado!',
      'save': 'üíæ Salvo com sucesso!',
      'send': 'üì§ Enviado com sucesso!',
      'approve': '‚úÖ Aprovado com sucesso!',
      'reject': '‚ùå Rejeitado com sucesso!',
      'assign': 'üë• Atribu√≠do com sucesso!',
      'unassign': 'üë§ Desvinculado com sucesso!',
      'sync': 'üîÑ Sincronizado com sucesso!',
      'reset': 'üîÑ Redefinido com sucesso!',
      'default': message || '‚úÖ Opera√ß√£o realizada com sucesso!'
    };

    const finalMessage = successMessages[action] || successMessages['default'];
    toastService.success(finalMessage);
  };

  // Fun√ß√£o para mostrar feedback de erro
  const showErrorFeedback = (error, context = '') => {
    const errorMessage = extractErrorMessage(error);
    
    // Contextos espec√≠ficos para melhor UX
    const contextMessages = {
      'login': `‚ùå Falha no login: ${errorMessage}`,
      'register': `‚ùå Falha no cadastro: ${errorMessage}`,
      'create': `‚ùå Falha ao criar: ${errorMessage}`,
      'update': `‚ùå Falha ao atualizar: ${errorMessage}`,
      'delete': `‚ùå Falha ao excluir: ${errorMessage}`,
      'upload': `‚ùå Falha no upload: ${errorMessage}`,
      'fetch': `‚ùå Falha ao carregar: ${errorMessage}`,
      'sync': `‚ùå Falha na sincroniza√ß√£o: ${errorMessage}`,
      'default': `‚ùå Erro: ${errorMessage}`
    };

    const finalMessage = contextMessages[context] || contextMessages['default'];
    toastService.error(finalMessage);
  };

  // Fun√ß√£o para mostrar avisos
  const showWarningFeedback = (message, context = '') => {
    const warningMessages = {
      'validation': `‚ö†Ô∏è Aten√ß√£o: ${message}`,
      'permission': '‚ö†Ô∏è Voc√™ n√£o tem permiss√£o para esta a√ß√£o.',
      'offline': '‚ö†Ô∏è Voc√™ est√° offline. Algumas funcionalidades podem n√£o funcionar.',
      'session': '‚ö†Ô∏è Sua sess√£o est√° expirando. Fa√ßa login novamente.',
      'limit': '‚ö†Ô∏è Limite atingido. Aguarde antes de tentar novamente.',
      'default': `‚ö†Ô∏è ${message}`
    };

    const finalMessage = warningMessages[context] || warningMessages['default'];
    toastService.warning(finalMessage);
  };

  // Wrapper para requisi√ß√µes com feedback autom√°tico
  const withFeedback = async (
    apiCall, 
    { 
      successMessage = '', 
      successAction = 'default',
      errorContext = 'default',
      showLoading = false 
    } = {}
  ) => {
    try {
      if (showLoading) {
        // Aqui poderia adicionar um loading toast se necess√°rio
      }

      const result = await apiCall();
      
      // Mostrar sucesso
      showSuccessFeedback(successMessage, successAction);
      
      return { success: true, data: result };
    } catch (error) {
      // Mostrar erro
      showErrorFeedback(error, errorContext);
      
      return { 
        success: false, 
        error: extractErrorMessage(error),
        originalError: error 
      };
    }
  };

  return {
    showSuccessFeedback,
    showErrorFeedback,
    showWarningFeedback,
    withFeedback,
    extractErrorMessage
  };
};

export default useApiFeedback;
