/**
 * AUDITORIA COMPLETA DO SISTEMA DE NOTIFICA√á√ïES TOAST
 * 
 * Este m√≥dulo centraliza todas as notifica√ß√µes do sistema NPJ,
 * garantindo consist√™ncia, evitando duplicatas e padronizando mensagens.
 */

import { toastService } from './toastService';

/**
 * Sistema centralizado de notifica√ß√µes para todo o fluxo do usu√°rio
 */
class ToastSystemAudit {
  constructor() {
    this.activeToasts = new Set(); // Previne duplicatas
    this.lastToastTime = {};       // Controla timing
    this.duplicateThreshold = 2000; // 2 segundos para prevenir spam
  }

  /**
   * M√©todo principal para exibir toast com verifica√ß√£o anti-duplicata
   */
  showToast(type, message, context = '', options = {}) {
    const toastKey = `${type}-${message}-${context}`;
    const now = Date.now();
    
    // Verificar se j√° existe toast similar recente
    if (this.lastToastTime[toastKey] && 
        (now - this.lastToastTime[toastKey] < this.duplicateThreshold)) {
      console.log(`üö´ Toast duplicado bloqueado: ${message}`);
      return;
    }
    
    this.lastToastTime[toastKey] = now;
    this.activeToasts.add(toastKey);
    
    // Executar toast atrav√©s do toastService
    toastService[type](message, options);
    
    // Remover da lista ap√≥s dura√ß√£o padr√£o
    setTimeout(() => {
      this.activeToasts.delete(toastKey);
    }, options.autoClose || 5000);
  }

  /**
   * Limpar cache de toasts para permitir novas notifica√ß√µes
   */
  clearCache() {
    this.activeToasts.clear();
    this.lastToastTime = {};
  }

  // ============= AUTENTICA√á√ÉO =============
  auth = {
    loginSuccess: (userName) => {
      this.showToast('success', `üéâ Bem-vindo(a), ${userName}!`, 'auth.login');
    },
    
    loginError: (error) => {
      const message = this._getLoginErrorMessage(error);
      this.showToast('error', message, 'auth.login');
    },
    
    logoutSuccess: () => {
      this.showToast('info', 'üëã Logout realizado com sucesso!', 'auth.logout');
    },
    
    registerSuccess: (userName) => {
      this.showToast('success', `‚úÖ Conta criada com sucesso! Bem-vindo(a), ${userName}!`, 'auth.register');
    },
    
    registerError: (error) => {
      const message = this._getRegisterErrorMessage(error);
      this.showToast('error', message, 'auth.register');
    },
    
    passwordChangeSuccess: () => {
      this.showToast('success', 'üîê Senha alterada com sucesso!', 'auth.password');
    },
    
    passwordResetSuccess: () => {
      this.showToast('success', 'üìß E-mail de recupera√ß√£o enviado!', 'auth.reset');
    },
    
    sessionExpired: () => {
      this.showToast('warning', '‚è∞ Sess√£o expirada. Fa√ßa login novamente.', 'auth.session');
    },
    
    unauthorized: () => {
      this.showToast('error', 'üö´ Acesso negado. Verifique suas permiss√µes.', 'auth.permission');
    }
  };

  // ============= PROCESSOS =============
  process = {
    createSuccess: (processName) => {
      this.showToast('success', `üìã Processo "${processName}" criado com sucesso!`, 'process.create');
    },
    
    createError: (error) => {
      const message = this._getProcessErrorMessage(error, 'criar');
      this.showToast('error', message, 'process.create');
    },
    
    updateSuccess: (processName) => {
      this.showToast('info', `üìù Processo "${processName}" atualizado!`, 'process.update');
    },
    
    updateError: (error) => {
      const message = this._getProcessErrorMessage(error, 'atualizar');
      this.showToast('error', message, 'process.update');
    },
    
    deleteSuccess: (processName) => {
      this.showToast('warning', `üóëÔ∏è Processo "${processName}" exclu√≠do!`, 'process.delete');
    },
    
    deleteError: (error) => {
      this.showToast('error', `‚ùå Erro ao excluir processo: ${error}`, 'process.delete');
    },
    
    assignSuccess: (studentName, processName) => {
      this.showToast('success', `üë• ${studentName} atribu√≠do ao processo "${processName}"!`, 'process.assign');
    },
    
    statusChangeSuccess: (status) => {
      this.showToast('info', `üìä Status alterado para "${status}"!`, 'process.status');
    }
  };

  // ============= AGENDAMENTOS =============
  schedule = {
    createSuccess: (title) => {
      this.showToast('success', `üìÖ Agendamento "${title}" criado! Aguardando aprova√ß√£o.`, 'schedule.create');
    },
    
    createError: (error) => {
      const message = this._getScheduleErrorMessage(error);
      this.showToast('error', message, 'schedule.create');
    },
    
    updateSuccess: (title) => {
      this.showToast('info', `üìù Agendamento "${title}" atualizado!`, 'schedule.update');
    },
    
    deleteSuccess: (title) => {
      this.showToast('warning', `üóëÔ∏è Agendamento "${title}" removido!`, 'schedule.delete');
    },
    
    approveSuccess: (title) => {
      this.showToast('success', `‚úÖ Agendamento "${title}" aprovado!`, 'schedule.approve');
    },
    
    rejectSuccess: (title) => {
      this.showToast('warning', `‚ùå Agendamento "${title}" recusado!`, 'schedule.reject');
    },
    
    conflictError: () => {
      this.showToast('error', '‚ö†Ô∏è Voc√™ j√° possui um agendamento no mesmo hor√°rio', 'schedule.conflict');
    },
    
    reminderSent: (title) => {
      this.showToast('info', `üìß Lembrete enviado para "${title}"!`, 'schedule.reminder');
    }
  };

  // ============= USU√ÅRIOS =============
  user = {
    createSuccess: (userName) => {
      this.showToast('success', `üë§ Usu√°rio "${userName}" criado com sucesso!`, 'user.create');
    },
    
    createError: (error) => {
      const message = this._getUserErrorMessage(error, 'criar');
      this.showToast('error', message, 'user.create');
    },
    
    updateSuccess: (userName) => {
      this.showToast('info', `üë§ Usu√°rio "${userName}" atualizado!`, 'user.update');
    },
    
    deactivateSuccess: (userName) => {
      this.showToast('warning', `üë§ Usu√°rio "${userName}" inativado!`, 'user.deactivate');
    },
    
    activateSuccess: (userName) => {
      this.showToast('success', `üë§ Usu√°rio "${userName}" reativado!`, 'user.activate');
    }
  };

  // ============= ARQUIVOS/DOCUMENTOS =============
  file = {
    uploadSuccess: (fileName) => {
      this.showToast('success', `üìÅ Arquivo "${fileName}" enviado com sucesso!`, 'file.upload');
    },
    
    uploadError: (error) => {
      this.showToast('error', `‚ùå Erro no upload: ${error}`, 'file.upload');
    },
    
    deleteSuccess: (fileName) => {
      this.showToast('warning', `üóëÔ∏è Arquivo "${fileName}" removido!`, 'file.delete');
    },
    
    downloadStart: (fileName) => {
      this.showToast('info', `‚¨áÔ∏è Download de "${fileName}" iniciado!`, 'file.download');
    },
    
    maxSizeError: () => {
      this.showToast('error', 'üìè Arquivo muito grande. Tamanho m√°ximo: 10MB', 'file.size');
    },
    
    invalidTypeError: () => {
      this.showToast('error', 'üìÑ Tipo de arquivo n√£o permitido', 'file.type');
    }
  };

  // ============= VALIDA√á√ÉO E FORMUL√ÅRIOS =============
  validation = {
    requiredField: (fieldName) => {
      this.showToast('warning', `‚ö†Ô∏è ${fieldName} √© obrigat√≥rio`, 'validation.required');
    },
    
    invalidEmail: () => {
      this.showToast('warning', 'üìß E-mail deve ter um formato v√°lido', 'validation.email');
    },
    
    passwordTooShort: () => {
      this.showToast('warning', 'üîê Senha deve ter pelo menos 6 caracteres', 'validation.password');
    },
    
    invalidDate: () => {
      this.showToast('warning', 'üìÖ Data inv√°lida. Verifique o formato', 'validation.date');
    },
    
    formSaveSuccess: () => {
      this.showToast('success', 'üíæ Dados salvos com sucesso!', 'validation.save');
    },
    
    formError: (error) => {
      this.showToast('error', `‚ùå Erro nos dados: ${error}`, 'validation.form');
    }
  };

  // ============= SISTEMA E CONEX√ÉO =============
  system = {
    networkError: () => {
      this.showToast('error', 'üåê Erro de conex√£o. Verifique sua internet.', 'system.network');
    },
    
    serverError: () => {
      this.showToast('error', 'üîß Erro interno do servidor. Tente novamente.', 'system.server');
    },
    
    loading: (message = 'Carregando...') => {
      this.showToast('info', `‚è≥ ${message}`, 'system.loading', { autoClose: 2000 });
    },
    
    syncSuccess: () => {
      this.showToast('success', 'üîÑ Dados sincronizados!', 'system.sync');
    },
    
    maintenanceMode: () => {
      this.showToast('warning', 'üîß Sistema em manuten√ß√£o. Algumas funcionalidades podem estar indispon√≠veis.', 'system.maintenance');
    }
  };

  // ============= M√âTODOS AUXILIARES =============
  
  _getLoginErrorMessage(error) {
    if (typeof error === 'string') {
      // Tratar mensagens espec√≠ficas do backend
      if (error.includes('Email n√£o encontrado') || error.includes('n√£o encontrado no sistema')) {
        return '‚ùå E-mail n√£o encontrado no sistema. Verifique se digitou corretamente ou fa√ßa seu cadastro.';
      }
      if (error.includes('Senha incorreta')) {
        return '‚ùå Senha incorreta. Verifique sua senha e tente novamente.';
      }
      if (error.includes('Email e senha s√£o obrigat√≥rios')) {
        return '‚ö†Ô∏è E-mail e senha s√£o obrigat√≥rios para fazer login.';
      }
      if (error.includes('inativ') || error.includes('bloqueado')) {
        return '‚ùå Sua conta est√° inativa. Entre em contato com o administrador.';
      }
      if (error.includes('Banco de dados n√£o dispon√≠vel')) {
        return 'üîß Sistema temporariamente indispon√≠vel. Tente novamente em alguns instantes.';
      }
      if (error.includes('Erro interno do servidor')) {
        return 'üîß Erro interno do servidor. Entre em contato com o suporte se persistir.';
      }
    }
    
    // Se for um objeto de erro com propriedades espec√≠ficas
    if (error && typeof error === 'object') {
      if (error.status === 404) {
        return '‚ùå E-mail n√£o encontrado no sistema. Verifique se digitou corretamente ou fa√ßa seu cadastro.';
      }
      if (error.status === 401) {
        return '‚ùå Senha incorreta. Verifique sua senha e tente novamente.';
      }
      if (error.status === 400) {
        return '‚ö†Ô∏è E-mail e senha s√£o obrigat√≥rios para fazer login.';
      }
      if (error.status === 503) {
        return 'üîß Sistema temporariamente indispon√≠vel. Tente novamente em alguns instantes.';
      }
      if (error.status === 500) {
        return 'üîß Erro interno do servidor. Entre em contato com o suporte se persistir.';
      }
    }
    
    return `‚ùå Falha no login: ${error || 'Erro inesperado. Tente novamente.'}`;
  }

  _getRegisterErrorMessage(error) {
    if (typeof error === 'string') {
      if (error.includes('email') && error.includes('existe')) {
        return '‚ùå Este e-mail j√° est√° cadastrado. Tente fazer login ou use outro e-mail.';
      }
      if (error.includes('senha')) {
        return '‚ùå Senha n√£o atende aos crit√©rios de seguran√ßa. Use pelo menos 6 caracteres.';
      }
      if (error.includes('telefone')) {
        return '‚ùå Telefone inv√°lido. Use um formato v√°lido com DDD.';
      }
    }
    return `‚ùå Falha no cadastro: ${error || 'Erro inesperado. Tente novamente.'}`;
  }

  _getProcessErrorMessage(error, action) {
    if (typeof error === 'string') {
      if (error.includes('duplicat') || error.includes('existe')) {
        return '‚ùå J√° existe um processo com este n√∫mero';
      }
      if (error.includes('validation') || error.includes('inv√°lido')) {
        return '‚ùå Dados inv√°lidos. Verifique os campos obrigat√≥rios';
      }
      if (error.includes('permission') || error.includes('permiss√£o')) {
        return '‚ùå Voc√™ n√£o tem permiss√£o para esta a√ß√£o';
      }
    }
    return `‚ùå Erro ao ${action} processo: ${error || 'Erro inesperado'}`;
  }

  _getScheduleErrorMessage(error) {
    if (typeof error === 'string') {
      if (error.includes('conflito') || error.includes('j√° existe')) {
        return '‚ö†Ô∏è Voc√™ j√° possui um agendamento no mesmo hor√°rio';
      }
      if (error.includes('data') || error.includes('hor√°rio')) {
        return '‚ùå Erro nas datas: verifique se est√£o corretas';
      }
      if (error.includes('validation') || error.includes('inv√°lido')) {
        return '‚ùå Dados inv√°lidos. Verifique os campos obrigat√≥rios';
      }
    }
    return `‚ùå Erro ao criar agendamento: ${error || 'Erro inesperado'}`;
  }

  _getUserErrorMessage(error, action) {
    if (typeof error === 'string') {
      if (error.includes('email') && error.includes('existe')) {
        return '‚ùå Este e-mail j√° est√° cadastrado no sistema';
      }
      if (error.includes('validation') || error.includes('inv√°lido')) {
        return '‚ùå Dados inv√°lidos. Verifique os campos obrigat√≥rios';
      }
    }
    return `‚ùå Erro ao ${action} usu√°rio: ${error || 'Erro inesperado'}`;
  }

  // ============= M√âTODOS DE UTILIT√ÅRIOS =============
  
  /**
   * Exibir toast de sucesso gen√©rico
   */
  success(message, context = '') {
    this.showToast('success', message, context);
  }

  /**
   * Exibir toast de erro gen√©rico
   */
  error(message, context = '') {
    this.showToast('error', message, context);
  }

  /**
   * Exibir toast de aviso gen√©rico
   */
  warning(message, context = '') {
    this.showToast('warning', message, context);
  }

  /**
   * Exibir toast de informa√ß√£o gen√©rico
   */
  info(message, context = '') {
    this.showToast('info', message, context);
  }

  /**
   * M√©todo para debug - listar toasts ativos
   */
  debug() {
    console.log('üîç Toasts ativos:', Array.from(this.activeToasts));
    console.log('üïê √öltimo timing:', this.lastToastTime);
  }
}

// Inst√¢ncia singleton
export const toastAudit = new ToastSystemAudit();
export default toastAudit;
