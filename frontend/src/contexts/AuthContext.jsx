// Context de Autentica√ß√£o - Gerencia estado de login e usu√°rio logado
import React, { createContext, useState, useEffect, useContext } from "react";
import { authService } from "../api/services";
import { toastAudit } from "../services/toastSystemAudit";
import Loader from "../components/common/Loader"; 

const AuthContext = createContext();


export function AuthProvider({ children }) {
  const [user, setUser] = useState(() => {
    const local = localStorage.getItem("user");
    const userData = local ? JSON.parse(local) : null;
    
    // Marcar que o usu√°rio foi carregado para evitar logs desnecess√°rios
    if (userData && !window.userLoggedOnce) {
      window.userLoggedOnce = true;
    }
    
    return userData;
  });
  const [token, setToken] = useState(() => localStorage.getItem("token") || "");
  const [refreshToken, setRefreshToken] = useState(() => localStorage.getItem("refreshToken") || "");
  const [loading, setLoading] = useState(false);

  // Persist√™ncia simples
  useEffect(() => {
    if (user && token) {
      localStorage.setItem("user", JSON.stringify(user));
      localStorage.setItem("token", token);
      if (refreshToken) localStorage.setItem("refreshToken", refreshToken);
    } else {
      localStorage.removeItem("user");
      localStorage.removeItem("token");
      localStorage.removeItem("refreshToken");
    }
  }, [user, token, refreshToken]);

  // Verificar token v√°lido na inicializa√ß√£o - MELHORADO
  useEffect(() => {
    const verifyToken = async () => {
      // Se tem token mas n√£o tem usu√°rio OU se tem ambos mas precisa validar
      if (token) {
        try {
          setLoading(true);
          console.log('üîç Verificando validade do token armazenado...');
          
          // Sempre validar o token no servidor, mesmo se j√° temos dados do usu√°rio
          const profileData = await authService.getProfile(token);
          
          // Verificar se os dados mudaram
          if (user && user.id !== profileData.id) {
            console.log('‚ö†Ô∏è Dados do usu√°rio desatualizados, for√ßando login');
            forceReauth('Dados do usu√°rio foram alterados. Fa√ßa login novamente.');
            return;
          }
          
          // Atualizar dados do usu√°rio com informa√ß√µes frescas do servidor
          setUser(profileData);
          console.log('‚úÖ Token v√°lido, usu√°rio autenticado:', profileData.nome);
          
        } catch (error) {
          console.log('‚ùå Token inv√°lido ou expirado:', error.message);
          
          // Verificar tipo de erro espec√≠fico
          if (error.status === 401) {
            console.log('üîÑ Tentando renovar token...');
            // Tentar renovar o token primeiro
            const refreshed = await tryRefreshToken();
            if (!refreshed) {
              forceReauth('Sua sess√£o expirou. Fa√ßa login novamente.');
            }
          } else {
            // Para outros erros, limpar sess√£o
            forceReauth('Erro na valida√ß√£o da sess√£o. Fa√ßa login novamente.');
          }
        } finally {
          setLoading(false);
        }
      } else {
        setLoading(false);
      }
    };
    
    verifyToken();
  }, []); // Executar apenas uma vez na inicializa√ß√£o

  const login = async (email, senha) => {
    setLoading(true);
    try {
      const data = await authService.login(email, senha);
      if (data.success) {
        setUser(data.usuario);
        setToken(data.token);
        setRefreshToken(data.refreshToken);
        setLoading(false);
        return { success: true };
      } else {
        setLoading(false);
        // Retornar a mensagem espec√≠fica do backend
        return { 
          success: false, 
          message: data.erro || data.message || "Erro ao fazer login" 
        };
      }
    } catch (err) {
      setLoading(false);
      // Retornar informa√ß√µes detalhadas do erro
      return { 
        success: false, 
        message: err.message || err.erro || "Erro ao fazer login",
        status: err.status || null
      };
    }
  };

  // Fun√ß√£o para tentar renovar o token automaticamente - MELHORADA
  const tryRefreshToken = async () => {
    if (!refreshToken) {
      console.log('‚ùå N√£o h√° refresh token dispon√≠vel');
      return false;
    }
    
    try {
      console.log('üîÑ Tentando renovar token...');
      const data = await authService.refreshToken(refreshToken);
      
      if (data.success && data.token) {
        console.log('‚úÖ Token renovado com sucesso');
        setToken(data.token);
        localStorage.setItem("token", data.token);
        
        // Se recebeu dados do usu√°rio, atualizar tamb√©m
        if (data.usuario) {
          setUser(data.usuario);
        }
        
        return true;
      } else {
        console.log('‚ùå Falha na renova√ß√£o do token:', data.message);
        return false;
      }
    } catch (err) {
      console.log('‚ùå Erro na renova√ß√£o do token:', err.message);
      
      // Se o refresh token tamb√©m √© inv√°lido, limpar tudo
      if (err.status === 401) {
        console.log('üßπ Refresh token inv√°lido, limpando sess√£o...');
        forceReauth('Sua sess√£o expirou completamente. Fa√ßa login novamente.');
      }
      
      return false;
    }
  };

  const register = async (nome, email, senha, telefone, role_id = 3) => {
    setLoading(true);
    try {
      await authService.register(nome, email, senha, telefone, role_id);
      setLoading(false);
      return { success: true };
    } catch (err) {
      setLoading(false);
      return { success: false, message: err.message || "Erro ao registrar" };
    }
  };

  const forgotPassword = async (email) => {
    setLoading(true);
    try {
      await authService.forgotPassword(email);
      setLoading(false);
      return { success: true };
    } catch (err) {
      setLoading(false);
      return { success: false, message: err.message || "Erro ao solicitar recupera√ß√£o" };
    }
  };

  const logout = () => {
    const userName = user?.nome || user?.name || 'Usu√°rio';
    setUser(null);
    setToken("");
    setRefreshToken("");
    localStorage.removeItem("user");
    localStorage.removeItem("token");
    localStorage.removeItem("refreshToken");
    toastAudit.auth.logoutSuccess();
  };

  // Fun√ß√£o para for√ßar nova autentica√ß√£o com mensagem espec√≠fica
  const forceReauth = (message) => {
    console.log('üö® For√ßando nova autentica√ß√£o:', message);
    
    // Limpar todos os dados de autentica√ß√£o
    setUser(null);
    setToken("");
    setRefreshToken("");
    localStorage.removeItem("user");
    localStorage.removeItem("token");
    localStorage.removeItem("refreshToken");
    
    // Mostrar notifica√ß√£o espec√≠fica
    toastAudit.auth.sessionExpired();
    
    // Se n√£o estiver na p√°gina de login, redirecionar
    if (!window.location.pathname.includes('/login') && 
        !window.location.pathname.includes('/') &&
        !window.location.pathname.includes('/auth')) {
      setTimeout(() => {
        window.location.href = '/login';
      }, 1500); // Dar tempo para o usu√°rio ver a notifica√ß√£o
    }
  };

  // Listener para eventos de token inv√°lido do interceptador
  useEffect(() => {
    const handleUnauthorized = (event) => {
      console.log('üì° Evento de token inv√°lido recebido:', event.detail);
      if (user) { // S√≥ processar se h√° usu√°rio logado
        forceReauth('Sua sess√£o foi invalidada. Fa√ßa login novamente.');
      }
    };

    window.addEventListener('auth:unauthorized', handleUnauthorized);
    
    return () => {
      window.removeEventListener('auth:unauthorized', handleUnauthorized);
    };
  }, [user]);

  if (loading) return <Loader text="Verificando autentica√ß√£o..." />;
  
  // Fun√ß√£o utilit√°ria para requisi√ß√µes autenticadas com auto-refresh MELHORADA
  const fetchWithAuth = async (fn, ...args) => {
    try {
      return await fn(token, ...args);
    } catch (err) {
      console.log('üîç Erro na requisi√ß√£o autenticada:', err);
      
      // Detectar diferentes tipos de erro 401
      if (err.status === 401 || err.message?.toLowerCase().includes('401')) {
        console.log('üîÑ Token inv√°lido detectado, tentando refresh...');
        
        // Verificar mensagens espec√≠ficas do backend
        if (err.message?.includes('Token expirado') || 
            err.message?.includes('Token inv√°lido') ||
            err.message?.includes('Token de acesso requerido')) {
          
          const refreshed = await tryRefreshToken();
          if (refreshed) {
            console.log('‚úÖ Token renovado, repetindo requisi√ß√£o...');
            return await fn(localStorage.getItem("token"), ...args);
          } else {
            console.log('‚ùå Falha ao renovar token, for√ßando nova autentica√ß√£o');
            forceReauth('Sua sess√£o expirou. Fa√ßa login novamente.');
            throw new Error('Sess√£o expirada');
          }
        }
      }
      
      // Para outros tipos de erro, apenas repassar
      throw err;
    }
  };

  return (
    <AuthContext.Provider value={{ 
      user, 
      setUser, 
      token, 
      refreshToken,
      login, 
      register, 
      forgotPassword, 
      logout, 
      forceReauth,
      loading, 
      isAuthenticated: !!user,
      fetchWithAuth,
      tryRefreshToken
    }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}

export function useAuthContext() {
  return useContext(AuthContext);
}