// Middleware para preven√ß√£o de duplica√ß√µes no sistema
const { Op } = require('sequelize');

/**
 * Middleware para preven√ß√£o de duplica√ß√£o de usu√°rios
 * Verifica se o email j√° est√° em uso por outro usu√°rio
 */
const preveniDuplicacaoUsuario = async (req, res, next) => {
  try {
    const { email } = req.body;
    const { usuarioModel: Usuario } = require('../models/indexModel');
    
    // Verificar se √© uma atualiza√ß√£o (tem ID no params)
    const isUpdate = req.params.id;
    const whereClause = { email };
    
    // Se for atualiza√ß√£o, excluir o pr√≥prio usu√°rio da verifica√ß√£o
    if (isUpdate) {
      whereClause.id = { [Op.ne]: req.params.id };
    }
    
    const usuarioExistente = await Usuario.findOne({ where: whereClause });
    
    if (usuarioExistente) {
      return res.status(409).json({
        erro: 'Duplica√ß√£o detectada',
        detalhes: {
          campo: 'email',
          valor: email,
          mensagem: 'Este email j√° est√° sendo usado por outro usu√°rio'
        }
      });
    }
    
    next();
  } catch (error) {
    console.error('Erro no middleware anti-duplica√ß√£o de usu√°rio:', error);
    next();
  }
};

/**
 * Middleware para preven√ß√£o de duplica√ß√£o de processos
 * Verifica se o n√∫mero do processo j√° existe
 */
const preveniDuplicacaoProcesso = async (req, res, next) => {
  try {
    const { numero_processo } = req.body;
    const { processoModel: Processo } = require('../models/indexModel');
    
    // Verificar se √© uma atualiza√ß√£o (tem ID no params)
    const isUpdate = req.params.id;
    const whereClause = { numero_processo };
    
    // Se for atualiza√ß√£o, excluir o pr√≥prio processo da verifica√ß√£o
    if (isUpdate) {
      whereClause.id = { [Op.ne]: req.params.id };
    }
    
    const processoExistente = await Processo.findOne({ where: whereClause });
    
    if (processoExistente) {
      return res.status(409).json({
        erro: 'Duplica√ß√£o detectada',
        detalhes: {
          campo: 'numero_processo',
          valor: numero_processo,
          mensagem: 'Este n√∫mero de processo j√° est√° cadastrado'
        }
      });
    }
    
    next();
  } catch (error) {
    console.error('Erro no middleware anti-duplica√ß√£o de processo:', error);
    next();
  }
};

/**
 * Middleware para preven√ß√£o de duplica√ß√£o de agendamentos
 * Verifica se h√° conflito de hor√°rio para o mesmo usu√°rio
 */
const preveniDuplicacaoAgendamento = async (req, res, next) => {
  try {
    console.log('üõ°Ô∏è Middleware anti-duplica√ß√£o executado para agendamento');
    console.log('üìù Dados recebidos:', { 
      data_inicio: req.body.data_inicio, 
      titulo: req.body.titulo, 
      usuario: req.user?.id,
      processo_id: req.body.processo_id 
    });
    
    const { data_inicio, data_fim, titulo, processo_id } = req.body;
    const { agendamentoModel: Agendamento } = require('../models/indexModel');
    
    if (!data_inicio || !processo_id) {
      console.log('‚ö†Ô∏è Pulando verifica√ß√£o - dados insuficientes (data_inicio ou processo_id ausentes)');
      return next();
    }
    
    const dataInicio = new Date(data_inicio);
    const dataFim = data_fim ? new Date(data_fim) : new Date(dataInicio.getTime() + (60 * 60000)); // 1 hora padr√£o
    
    console.log('üîç Verificando conflitos no PROCESSO:', processo_id);
    console.log('‚è∞ Per√≠odo:', { inicio: dataInicio, fim: dataFim });
    
    // Verificar se √© uma atualiza√ß√£o (tem ID no params)
    const isUpdate = req.params.id;
    
    // ALTERA√á√ÉO PRINCIPAL: Verificar conflito de hor√°rio POR PROCESSO (n√£o por usu√°rio)
    const whereClauseHorario = {
      processo_id, // Conflito apenas no mesmo processo
      [Op.and]: [
        {
          data_inicio: {
            [Op.lt]: dataFim
          }
        },
        {
          data_fim: {
            [Op.gt]: dataInicio
          }
        }
      ]
    };
    
    // Se for atualiza√ß√£o, excluir o pr√≥prio agendamento da verifica√ß√£o
    if (isUpdate) {
      whereClauseHorario.id = { [Op.ne]: req.params.id };
    }
    
    const agendamentoConflitante = await Agendamento.findOne({ where: whereClauseHorario });
    
    console.log('üîç Resultado da busca por conflitos:', agendamentoConflitante ? 'CONFLITO ENCONTRADO' : 'Nenhum conflito');
    
    if (agendamentoConflitante) {
      console.log('‚ùå Bloqueando cria√ß√£o devido ao conflito no processo');
      return res.status(409).json({
        success: false,
        tipo: 'conflito_processo',
        titulo: 'Conflito no Processo',
        mensagem: `J√° existe um agendamento que conflita com este hor√°rio no processo`,
        detalhes: {
          campo: 'data_inicio',
          valor: data_inicio,
          processo_id: processo_id,
          agendamento_conflitante: {
            id: agendamentoConflitante.id,
            titulo: agendamentoConflitante.titulo,
            data_inicio: agendamentoConflitante.data_inicio,
            data_fim: agendamentoConflitante.data_fim
          }
        },
        toast: {
          type: 'error',
          title: 'Conflito no Processo',
          message: `J√° existe "${agendamentoConflitante.titulo}" marcado para este hor√°rio no processo`,
          duration: 5000
        }
      });
    }
    
    console.log('‚úÖ Nenhum conflito de hor√°rio encontrado no processo');
    
    // NOVA VERIFICA√á√ÉO: Conflito de hor√°rio POR USU√ÅRIO (independente do processo)
    console.log('üë§ Verificando conflitos para o usu√°rio:', req.user.id);
    
    const whereClauseUsuario = {
      criado_por: req.user.id, // Verificar agendamentos do mesmo usu√°rio
      [Op.and]: [
        {
          data_inicio: {
            [Op.lt]: dataFim
          }
        },
        {
          data_fim: {
            [Op.gt]: dataInicio
          }
        }
      ]
    };
    
    // Se for atualiza√ß√£o, excluir o pr√≥prio agendamento da verifica√ß√£o
    if (isUpdate) {
      whereClauseUsuario.id = { [Op.ne]: req.params.id };
    }
    
    const agendamentoUsuarioConflitante = await Agendamento.findOne({ 
      where: whereClauseUsuario,
      include: [
        { 
          model: require('../models/indexModel').processoModel, 
          as: 'processo', 
          attributes: ['id', 'numero_processo', 'titulo'] 
        }
      ]
    });
    
    if (agendamentoUsuarioConflitante) {
      console.log('‚ùå Bloqueando cria√ß√£o devido ao conflito de usu√°rio');
      
      return res.status(409).json({
        success: false,
        message: 'Voc√™ j√° possui um agendamento no mesmo hor√°rio',
        toast: 'Voc√™ j√° possui um agendamento no mesmo hor√°rio'
      });
    }
    
    console.log('‚úÖ Nenhum conflito de usu√°rio encontrado');
    
    // Verificar duplica√ß√£o de t√≠tulo no mesmo processo (mais restritivo - mesmo titulo e hor√°rio pr√≥ximo)
    const inicioDia = new Date(dataInicio);
    inicioDia.setHours(0, 0, 0, 0);
    const fimDia = new Date(dataInicio);
    fimDia.setHours(23, 59, 59, 999);
    
    const whereClauseTitulo = {
      processo_id, // Verificar t√≠tulo duplicado apenas no mesmo processo
      titulo,
      data_inicio: {
        [Op.between]: [inicioDia, fimDia]
      }
    };
    
    if (isUpdate) {
      whereClauseTitulo.id = { [Op.ne]: req.params.id };
    }
    
    const agendamentoTituloDuplicado = await Agendamento.findOne({ where: whereClauseTitulo });
    
    if (agendamentoTituloDuplicado) {
      console.log('‚ùå Bloqueando cria√ß√£o devido ao t√≠tulo duplicado no processo');
      return res.status(409).json({
        success: false,
        tipo: 'titulo_duplicado',
        titulo: 'T√≠tulo Duplicado',
        mensagem: `J√° existe um agendamento com este t√≠tulo no processo`,
        detalhes: {
          campo: 'titulo',
          valor: titulo,
          processo_id: processo_id
        },
        toast: {
          type: 'warning',
          title: 'T√≠tulo Duplicado',
          message: `J√° existe um agendamento com o t√≠tulo "${titulo}" neste processo hoje`,
          duration: 4000
        }
      });
    }
    
    console.log('‚úÖ Agendamento aprovado pelo middleware anti-duplica√ß√£o');
    next();
  } catch (error) {
    console.error('‚ùå Erro no middleware anti-duplica√ß√£o de agendamento:', error);
    next();
  }
};

/**
 * Middleware para preven√ß√£o de vincula√ß√£o duplicada usu√°rio-processo
 */
const preveniDuplicacaoVinculacao = async (req, res, next) => {
  try {
    const { usuario_id } = req.body;
    const processo_id = req.params.id;
    const { usuarioProcessoModel: UsuarioProcesso } = require('../models/indexModel');
    
    if (!usuario_id || !processo_id) {
      return next();
    }
    
    const vinculoExistente = await UsuarioProcesso.findOne({
      where: { usuario_id, processo_id }
    });
    
    if (vinculoExistente) {
      return res.status(409).json({
        erro: 'Vincula√ß√£o duplicada',
        detalhes: {
          campo: 'vinculacao',
          mensagem: 'Este usu√°rio j√° est√° vinculado a este processo'
        }
      });
    }
    
    next();
  } catch (error) {
    console.error('Erro no middleware anti-duplica√ß√£o de vincula√ß√£o:', error);
    next();
  }
};

module.exports = {
  preveniDuplicacaoUsuario,
  preveniDuplicacaoProcesso,
  preveniDuplicacaoAgendamento,
  preveniDuplicacaoVinculacao
};
