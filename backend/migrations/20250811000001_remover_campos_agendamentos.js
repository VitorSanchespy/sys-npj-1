/**
 * Migration - Remover campos obsoletos de agendamentos
 * Remove refer√™ncias √† tabela agendamentos que foi exclu√≠da
 * Data: 11/08/2025
 */
module.exports = {
  async up(connection) {
    console.log('Removendo campos obsoletos de agendamentos...\n');

    // 1. Remover coluna agendamento_id da tabela notificacoes se ainda existir
    try {
      await connection.execute(`
        ALTER TABLE notificacoes 
        DROP COLUMN IF EXISTS agendamento_id
      `);
      console.log('‚úÖ Coluna agendamento_id removida da tabela notificacoes');
    } catch (error) {
      console.log('‚ö†Ô∏è Coluna agendamento_id j√° foi removida ou n√£o existe');
    }

    // 2. Verificar se existem foreign keys relacionadas
    try {
      const [foreignKeys] = await connection.execute(`
        SELECT CONSTRAINT_NAME 
        FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
        WHERE TABLE_SCHEMA = 'npjdatabase' 
        AND REFERENCED_TABLE_NAME = 'agendamentos'
      `);

      for (const fk of foreignKeys) {
        try {
          await connection.execute(`
            ALTER TABLE notificacoes 
            DROP FOREIGN KEY ${fk.CONSTRAINT_NAME}
          `);
          console.log(`‚úÖ Foreign key ${fk.CONSTRAINT_NAME} removida`);
        } catch (error) {
          console.log(`‚ö†Ô∏è Foreign key ${fk.CONSTRAINT_NAME} j√° foi removida`);
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar foreign keys:', error.message);
    }

    // 3. Adicionar campo para refer√™ncia de eventos externos (Google Calendar, etc)
    try {
      await connection.execute(`
        ALTER TABLE notificacoes 
        ADD COLUMN IF NOT EXISTS evento_externo_id VARCHAR(255) NULL COMMENT 'ID do evento em sistema externo (Google Calendar, etc)'
      `);
      console.log('‚úÖ Campo evento_externo_id adicionado para integra√ß√£o externa');
    } catch (error) {
      try {
        await connection.execute(`
          ALTER TABLE notificacoes 
          ADD COLUMN evento_externo_id VARCHAR(255) NULL COMMENT 'ID do evento em sistema externo (Google Calendar, etc)'
        `);
      } catch (e) { /* Campo j√° existe */ }
      console.log('‚úÖ Campo evento_externo_id verificado');
    }

    // 4. Adicionar √≠ndice no novo campo
    try {
      await connection.execute(`
        CREATE INDEX IF NOT EXISTS idx_evento_externo_id 
        ON notificacoes (evento_externo_id)
      `);
      console.log('‚úÖ √çndice criado para evento_externo_id');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice j√° existe ou erro ao criar:', error.message);
    }

    console.log('\n‚úÖ Migration conclu√≠da!');
    console.log('üìä Sistema agora usa apenas Google Calendar para agendamentos');
    console.log('üîó Notifica√ß√µes podem referenciar eventos externos via evento_externo_id');
  },

  async down(connection) {
    console.log('Revertendo remo√ß√£o de campos obsoletos...\n');

    // Remover o campo adicionado
    try {
      await connection.execute(`
        ALTER TABLE notificacoes 
        DROP COLUMN IF EXISTS evento_externo_id
      `);
      console.log('‚úÖ Campo evento_externo_id removido');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao remover campo evento_externo_id:', error.message);
    }

    // Nota: N√£o recriaremos a tabela agendamentos no rollback
    // pois o sistema foi reestruturado para usar Google Calendar
    console.log('\n‚ö†Ô∏è ATEN√á√ÉO: Rollback n√£o recria tabela agendamentos');
    console.log('Sistema foi reestruturado para usar Google Calendar como fonte √∫nica');
    
    console.log('\n‚úÖ Rollback conclu√≠do!');
  }
};
