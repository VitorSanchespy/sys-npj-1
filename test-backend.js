const axios = require('axios');

const baseURL = 'http://localhost:3001/api';

// Configura√ß√£o de teste
const config = {
  usuario: {
    email: 'admin@teste.com',
    senha: 'admin123'
  }
};

let authToken = '';

// Log de teste
function logTeste(emoji, mensagem, sucesso = true) {
  const status = sucesso ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${emoji} ${mensagem}`);
}

// Teste de login
async function testeLogin() {
  try {
    console.log('\nüîê Testando autentica√ß√£o...');
    
    const response = await axios.post(`${baseURL}/auth/login`, config.usuario);
    
    if (response.data.token) {
      authToken = response.data.token;
      logTeste('üîë', 'Login realizado com sucesso');
      return true;
    } else {
      logTeste('‚ùå', 'Token n√£o encontrado na resposta', false);
      return false;
    }
  } catch (error) {
    logTeste('‚ùå', `Erro no login: ${error.response?.data?.erro || error.message}`, false);
    return false;
  }
}

// Teste do sistema de notifica√ß√µes
async function testeNotificacoes() {
  try {
    console.log('\nüì¨ Testando sistema de notifica√ß√µes...');
    
    const headers = { Authorization: `Bearer ${authToken}` };
    
    // 1. Testar listagem de notifica√ß√µes
    console.log('\nüìã Testando listagem de notifica√ß√µes...');
    const responseList = await axios.get(`${baseURL}/notificacoes`, { headers });
    logTeste('üìã', `Listagem retornou ${responseList.data.length} notifica√ß√µes`);
    
    // 2. Testar contagem de n√£o lidas
    console.log('\nüî¢ Testando contagem de n√£o lidas...');
    const responseCount = await axios.get(`${baseURL}/notificacoes/nao-lidas/count`, { headers });
    logTeste('üî¢', `Contagem de n√£o lidas: ${responseCount.data.count}`);
    
    // 3. Testar cria√ß√£o de notifica√ß√£o
    console.log('\n‚ú® Testando cria√ß√£o de notifica√ß√£o...');
    const novaNotificacao = {
      titulo: 'Teste Sistema',
      mensagem: 'Notifica√ß√£o de teste do sistema',
      tipo: 'sistema',
      usuario_id: 1
    };
    
    try {
      const responseCreate = await axios.post(`${baseURL}/notificacoes`, novaNotificacao, { headers });
      logTeste('‚ú®', 'Notifica√ß√£o criada com sucesso');
      
      // 4. Testar marca√ß√£o como lida
      const notificacaoId = responseCreate.data.id;
      if (notificacaoId) {
        console.log('\n‚úì Testando marca√ß√£o como lida...');
        await axios.put(`${baseURL}/notificacoes/${notificacaoId}/lida`, {}, { headers });
        logTeste('‚úì', 'Notifica√ß√£o marcada como lida');
      }
    } catch (createError) {
      logTeste('‚ùå', `Erro ao criar notifica√ß√£o: ${createError.response?.data?.erro || createError.message}`, false);
    }
    
    // 5. Testar configura√ß√µes
    console.log('\n‚öôÔ∏è Testando configura√ß√µes...');
    try {
      const responseConfig = await axios.get(`${baseURL}/notificacoes/configuracoes`, { headers });
      logTeste('‚öôÔ∏è', 'Configura√ß√µes carregadas com sucesso');
    } catch (configError) {
      logTeste('‚ùå', `Erro nas configura√ß√µes: ${configError.response?.data?.erro || configError.message}`, false);
    }
    
    return true;
  } catch (error) {
    logTeste('‚ùå', `Erro geral no teste de notifica√ß√µes: ${error.response?.data?.erro || error.message}`, false);
    return false;
  }
}

// Fun√ß√£o principal de teste
async function executarTestes() {
  console.log('üéØ TESTE DO SISTEMA DE NOTIFICA√á√ïES NPJ');
  console.log('=' .repeat(50));
  
  try {
    // 1. Teste de login
    const loginOk = await testeLogin();
    if (!loginOk) {
      console.log('\n‚ùå Falha no login - interrompendo testes');
      return;
    }
    
    // 2. Teste do sistema de notifica√ß√µes
    await testeNotificacoes();
    
    console.log('\nüéØ TESTES CONCLU√çDOS!');
    
  } catch (error) {
    console.error('\n‚ùå Erro geral:', error);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  executarTestes().catch(console.error);
}

module.exports = { executarTestes };
