const axios = require('axios');
const fs = require('fs');

const BASE_URL = 'http://localhost:3001';
let authToken = '';
let reportData = {
  timestamp: new Date().toISOString(),
  totalTests: 0,
  passedTests: 0,
  failedTests: 0,
  endpoints: [],
  errors: []
};

// Fun√ß√£o utilit√°ria para fazer requisi√ß√µes
async function makeRequest(method, endpoint, data = null, headers = {}) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return {
      success: false,
      error: error.response?.data || error.message,
      status: error.response?.status || 500
    };
  }
}

// Fun√ß√£o para registrar resultado do teste
function logTest(endpoint, method, result, description = '') {
  reportData.totalTests++;
  
  const testResult = {
    endpoint,
    method,
    description,
    status: result.status,
    success: result.success,
    timestamp: new Date().toISOString()
  };
  
  if (result.success) {
    reportData.passedTests++;
    console.log(`‚úÖ ${method} ${endpoint} - ${result.status} - ${description}`);
  } else {
    reportData.failedTests++;
    console.log(`‚ùå ${method} ${endpoint} - ${result.status} - ${description}`);
    testResult.error = result.error;
    reportData.errors.push({
      endpoint,
      method,
      error: result.error,
      status: result.status
    });
  }
  
  reportData.endpoints.push(testResult);
}

// Testes do sistema
async function runTests() {
  console.log('üöÄ Iniciando testes completos do backend...\n');
  
  // 1. Teste de conex√£o b√°sica
  console.log('üì° 1. TESTANDO CONEX√ÉO B√ÅSICA');
  const healthResult = await makeRequest('GET', '/');
  logTest('/', 'GET', healthResult, 'Teste de conex√£o b√°sica');
  
  // 2. Testes de autentica√ß√£o
  console.log('\nüîê 2. TESTANDO AUTENTICA√á√ÉO');
  
  // Login com credenciais v√°lidas
  const loginResult = await makeRequest('POST', '/api/auth/login', {
    email: 'admin@teste.com',
    senha: 'admin123'
  });
  logTest('/api/auth/login', 'POST', loginResult, 'Login com credenciais v√°lidas');
  
  if (loginResult.success && loginResult.data.token) {
    authToken = loginResult.data.token;
    console.log('üîë Token obtido com sucesso');
  }
  
  // Login com credenciais inv√°lidas
  const loginInvalidResult = await makeRequest('POST', '/api/auth/login', {
    email: 'invalido@teste.com',
    senha: 'senhaerrada'
  });
  logTest('/api/auth/login', 'POST', loginInvalidResult, 'Login com credenciais inv√°lidas (deve falhar)');
  
  // Registro de novo usu√°rio
  const registroResult = await makeRequest('POST', '/api/auth/registro', {
    nome: 'Usu√°rio Teste',
    email: 'novousuario@teste.com',
    senha: 'senha123',
    role_id: 2
  });
  logTest('/api/auth/registro', 'POST', registroResult, 'Registro de novo usu√°rio');
  
  // Esqueci senha
  const esqueciSenhaResult = await makeRequest('POST', '/api/auth/esqueci-senha', {
    email: 'admin@teste.com'
  });
  logTest('/api/auth/esqueci-senha', 'POST', esqueciSenhaResult, 'Esqueci senha');
  
  // 3. Testes com autentica√ß√£o
  const authHeaders = authToken ? { 'Authorization': `Bearer ${authToken}` } : {};
  
  console.log('\nüë§ 3. TESTANDO ENDPOINTS DE USU√ÅRIO');
  
  // Perfil do usu√°rio
  const perfilResult = await makeRequest('GET', '/api/auth/perfil', null, authHeaders);
  logTest('/api/auth/perfil', 'GET', perfilResult, 'Obter perfil do usu√°rio');
  
  // Listar usu√°rios
  const usuariosResult = await makeRequest('GET', '/api/usuarios', null, authHeaders);
  logTest('/api/usuarios', 'GET', usuariosResult, 'Listar usu√°rios');
  
  // Criar usu√°rio
  const criarUsuarioResult = await makeRequest('POST', '/api/usuarios', {
    nome: 'Novo Usu√°rio API',
    email: 'apiuser@teste.com',
    senha: 'senha123',
    role_id: 3
  }, authHeaders);
  logTest('/api/usuarios', 'POST', criarUsuarioResult, 'Criar novo usu√°rio');
  
  // Obter usu√°rio espec√≠fico
  const usuarioResult = await makeRequest('GET', '/api/usuarios/1', null, authHeaders);
  logTest('/api/usuarios/1', 'GET', usuarioResult, 'Obter usu√°rio espec√≠fico');
  
  // Atualizar usu√°rio
  const atualizarUsuarioResult = await makeRequest('PUT', '/api/usuarios/1', {
    nome: 'Nome Atualizado'
  }, authHeaders);
  logTest('/api/usuarios/1', 'PUT', atualizarUsuarioResult, 'Atualizar usu√°rio');
  
  console.log('\nüìã 4. TESTANDO ENDPOINTS DE PROCESSOS');
  
  // Listar processos
  const processosResult = await makeRequest('GET', '/api/processos', null, authHeaders);
  logTest('/api/processos', 'GET', processosResult, 'Listar processos');
  
  // Criar processo
  const criarProcessoResult = await makeRequest('POST', '/api/processos', {
    numero_processo: '2024-003-TESTE-API',
    parte_contraria: 'Empresa XYZ Ltda',
    assunto: 'A√ß√£o de Cobran√ßa',
    comarca: 'Cuiab√°',
    vara: '1¬™ Vara Civil',
    valor_causa: 5000.00,
    tipo_acao: 'Civil',
    status: 'Em Andamento',
    prioridade: 'Normal',
    descricao: 'Processo criado via API de teste',
    idusuario_responsavel: 1
  }, authHeaders);
  logTest('/api/processos', 'POST', criarProcessoResult, 'Criar novo processo');
  
  // Obter processo espec√≠fico
  const processoResult = await makeRequest('GET', '/api/processos/1', null, authHeaders);
  logTest('/api/processos/1', 'GET', processoResult, 'Obter processo espec√≠fico');
  
  // Atualizar processo
  const atualizarProcessoResult = await makeRequest('PUT', '/api/processos/1', {
    status: 'Finalizado'
  }, authHeaders);
  logTest('/api/processos/1', 'PUT', atualizarProcessoResult, 'Atualizar processo');
  
  console.log('\nüìÖ 5. TESTANDO ENDPOINTS DE AGENDAMENTOS');
  
  // Listar agendamentos
  const agendamentosResult = await makeRequest('GET', '/api/agendamentos', null, authHeaders);
  logTest('/api/agendamentos', 'GET', agendamentosResult, 'Listar agendamentos');
  
  // Criar agendamento
  const criarAgendamentoResult = await makeRequest('POST', '/api/agendamentos', {
    titulo: 'Audi√™ncia de Teste API',
    data_agendamento: '2024-12-25',
    hora_inicio: '10:00',
    hora_fim: '11:00',
    local: 'F√≥rum Central',
    tipo: 'Audi√™ncia',
    descricao: 'Audi√™ncia criada via API de teste',
    idprocesso: 1,
    idusuario: 1
  }, authHeaders);
  logTest('/api/agendamentos', 'POST', criarAgendamentoResult, 'Criar novo agendamento');
  
  // Obter agendamento espec√≠fico
  const agendamentoResult = await makeRequest('GET', '/api/agendamentos/1', null, authHeaders);
  logTest('/api/agendamentos/1', 'GET', agendamentoResult, 'Obter agendamento espec√≠fico');
  
  // Atualizar agendamento
  const atualizarAgendamentoResult = await makeRequest('PUT', '/api/agendamentos/1', {
    status: 'Confirmado'
  }, authHeaders);
  logTest('/api/agendamentos/1', 'PUT', atualizarAgendamentoResult, 'Atualizar agendamento');
  
  console.log('\nüîî 6. TESTANDO ENDPOINTS DE NOTIFICA√á√ïES');
  
  // Listar notifica√ß√µes
  const notificacoesResult = await makeRequest('GET', '/api/notificacoes', null, authHeaders);
  logTest('/api/notificacoes', 'GET', notificacoesResult, 'Listar notifica√ß√µes');
  
  // Criar notifica√ß√£o
  const criarNotificacaoResult = await makeRequest('POST', '/api/notificacoes', {
    titulo: 'Notifica√ß√£o de Teste API',
    mensagem: 'Esta √© uma notifica√ß√£o criada via API de teste',
    idusuario: 1,
    tipo: 'info'
  }, authHeaders);
  logTest('/api/notificacoes', 'POST', criarNotificacaoResult, 'Criar nova notifica√ß√£o');
  
  // Marcar como lida
  const lerNotificacaoResult = await makeRequest('PUT', '/api/notificacoes/1/lida', {}, authHeaders);
  logTest('/api/notificacoes/1/lida', 'PUT', lerNotificacaoResult, 'Marcar notifica√ß√£o como lida');
  
  console.log('\nüìÅ 7. TESTANDO ENDPOINTS DE ARQUIVOS');
  
  // Listar arquivos
  const arquivosResult = await makeRequest('GET', '/api/arquivos', null, authHeaders);
  logTest('/api/arquivos', 'GET', arquivosResult, 'Listar arquivos');
  
  // Upload seria testado com multipart, aqui testamos s√≥ a estrutura
  const uploadTestResult = await makeRequest('POST', '/api/arquivos/upload', {}, authHeaders);
  logTest('/api/arquivos/upload', 'POST', uploadTestResult, 'Teste estrutura upload (sem arquivo)');
  
  console.log('\nüîÑ 8. TESTANDO ENDPOINTS DE ATUALIZA√á√ïES');
  
  // Listar atualiza√ß√µes
  const atualizacoesResult = await makeRequest('GET', '/api/atualizacoes', null, authHeaders);
  logTest('/api/atualizacoes', 'GET', atualizacoesResult, 'Listar atualiza√ß√µes de processo');
  
  // Criar atualiza√ß√£o
  const criarAtualizacaoResult = await makeRequest('POST', '/api/atualizacoes', {
    titulo: 'Atualiza√ß√£o de Teste API',
    descricao: 'Atualiza√ß√£o criada via API de teste',
    idprocesso: 1,
    status_anterior: 'Em Andamento',
    status_novo: 'Aguardando'
  }, authHeaders);
  logTest('/api/atualizacoes', 'POST', criarAtualizacaoResult, 'Criar nova atualiza√ß√£o');
  
  console.log('\nüìä 9. TESTANDO ENDPOINTS DE TABELAS AUXILIARES');
  
  // Listar roles
  const rolesResult = await makeRequest('GET', '/api/tabelas/roles', null, authHeaders);
  logTest('/api/tabelas/roles', 'GET', rolesResult, 'Listar roles');
  
  // Listar status
  const statusResult = await makeRequest('GET', '/api/tabelas/status', null, authHeaders);
  logTest('/api/tabelas/status', 'GET', statusResult, 'Listar status');
  
  // Listar tipos
  const tiposResult = await makeRequest('GET', '/api/tabelas/tipos-acao', null, authHeaders);
  logTest('/api/tabelas/tipos-acao', 'GET', tiposResult, 'Listar tipos de a√ß√£o');
  
  console.log('\nüìä RELAT√ìRIO FINAL');
  console.log('='.repeat(50));
  console.log(`üìà Total de testes: ${reportData.totalTests}`);
  console.log(`‚úÖ Testes passaram: ${reportData.passedTests}`);
  console.log(`‚ùå Testes falharam: ${reportData.failedTests}`);
  console.log(`üìä Taxa de sucesso: ${((reportData.passedTests / reportData.totalTests) * 100).toFixed(1)}%`);
  
  if (reportData.errors.length > 0) {
    console.log('\nüö® ERROS ENCONTRADOS:');
    reportData.errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error.method} ${error.endpoint} - Status: ${error.status}`);
      console.log(`   Erro: ${JSON.stringify(error.error, null, 2)}`);
    });
  }
  
  // Salvar relat√≥rio
  fs.writeFileSync('test-report.json', JSON.stringify(reportData, null, 2));
  console.log('\nüìù Relat√≥rio salvo em test-report.json');
  
  console.log('\nüéâ Testes conclu√≠dos!');
}

// Verificar se o servidor est√° rodando
async function checkServer() {
  try {
    const response = await axios.get(BASE_URL);
    console.log('‚úÖ Servidor est√° rodando');
    return true;
  } catch (error) {
    console.log('‚ùå Servidor n√£o est√° rodando. Certifique-se de que o backend est√° ativo na porta 3001');
    return false;
  }
}

// Executar testes
async function main() {
  if (await checkServer()) {
    await runTests();
  }
}

main().catch(console.error);
