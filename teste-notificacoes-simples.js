/**
 * Teste simples do sistema de notifica√ß√µes usando usu√°rios existentes
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

async function login(credenciais) {
    try {
        const response = await axios.post(`${BASE_URL}/auth/login`, credenciais);
        console.log(`‚úÖ Login realizado: ${credenciais.email}`);
        return {
            token: response.data.token,
            user: response.data.user
        };
    } catch (error) {
        console.error(`‚ùå Erro no login ${credenciais.email}:`, error.response?.data?.erro || error.message);
        return null;
    }
}

async function criarAgendamento(token, dadosAgendamento) {
    try {
        const response = await axios.post(`${BASE_URL}/api/agendamentos`, dadosAgendamento, {
            headers: { Authorization: `Bearer ${token}` }
        });
        console.log(`‚úÖ Agendamento criado: ${dadosAgendamento.titulo}`);
        console.log(`   üìß Sistema deve ter enviado notifica√ß√µes!`);
        return response.data;
    } catch (error) {
        console.error(`‚ùå Erro ao criar agendamento:`, error.response?.data?.erro || error.message);
        return null;
    }
}

async function listarNotificacoes(token, nomeUsuario) {
    try {
        const response = await axios.get(`${BASE_URL}/api/notificacoes`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        console.log(`\nüì¨ Notifica√ß√µes para ${nomeUsuario}:`);
        if (response.data.length === 0) {
            console.log('   Nenhuma notifica√ß√£o encontrada');
        } else {
            response.data.slice(0, 5).forEach((notif, index) => {
                console.log(`   ${index + 1}. [${notif.tipo}] ${notif.titulo}`);
                console.log(`      ${notif.mensagem}`);
                console.log(`      Status: ${notif.status} | Canal: ${notif.canal}`);
            });
        }
        return response.data;
    } catch (error) {
        console.error(`‚ùå Erro ao listar notifica√ß√µes:`, error.response?.data?.erro || error.message);
        return [];
    }
}

async function testarNotificacoesSimples() {
    console.log('üîî TESTE SIMPLES - SISTEMA DE NOTIFICA√á√ïES');
    console.log('=' .repeat(60));

    // 1. Login com usu√°rios existentes
    console.log('\nüîê 1. Fazendo login...');
    
    const admin = await login({
        email: 'teste@teste.com',
        senha: 'senha123'
    });

    if (!admin) {
        console.error('‚ùå Falha no login. Teste abortado.');
        return;
    }

    console.log(`   üë§ Logado como: ${admin.user.nome} (ID: ${admin.user.id})`);
    console.log(`   üé≠ Role: ${admin.user.role?.nome || 'N/A'}`);

    console.log('\n' + '‚îÄ'.repeat(60));

    // 2. Criar agendamento para si mesmo
    console.log('\nüìÖ 2. Criando agendamento...');
    console.log('   üìß Esperado: Notifica√ß√£o de confirma√ß√£o');

    const agendamento = await criarAgendamento(admin.token, {
        tipo_evento: 'reuniao',
        titulo: 'Reuni√£o de Teste - Sistema de Notifica√ß√µes',
        descricao: 'Teste do sistema de notifica√ß√µes de agendamentos',
        data_evento: '2025-08-15T10:00:00Z',
        local: 'Sala de Reuni√µes - NPJ',
        lembrete_1_dia: true,
        lembrete_2_dias: false,
        lembrete_1_semana: false
    });

    if (agendamento) {
        console.log(`   üìã Agendamento criado com ID: ${agendamento.id}`);
        
        // 3. Aguardar processamento
        console.log('\n‚è≥ 3. Aguardando processamento das notifica√ß√µes...');
        await new Promise(resolve => setTimeout(resolve, 3000));

        // 4. Verificar notifica√ß√µes
        console.log('\nüì¨ 4. Verificando notifica√ß√µes:');
        const notificacoes = await listarNotificacoes(admin.token, admin.user.nome);

        if (notificacoes.length > 0) {
            console.log(`\n‚úÖ Sistema funcionando! ${notificacoes.length} notifica√ß√µes encontradas.`);
        } else {
            console.log('\n‚ö†Ô∏è  Nenhuma notifica√ß√£o encontrada. Verifique os logs do backend.');
        }

        // 5. Cancelar agendamento para testar notifica√ß√£o de cancelamento
        console.log('\nüóëÔ∏è  5. Testando cancelamento...');
        try {
            await axios.delete(`${BASE_URL}/api/agendamentos/${agendamento.id}`, {
                headers: { Authorization: `Bearer ${admin.token}` },
                data: { motivo: 'Teste finalizado' }
            });
            console.log('‚úÖ Agendamento cancelado');
            
            // Aguardar e verificar novamente
            await new Promise(resolve => setTimeout(resolve, 2000));
            console.log('\nüì¨ Verificando notifica√ß√µes ap√≥s cancelamento:');
            await listarNotificacoes(admin.token, admin.user.nome);
            
        } catch (error) {
            console.error('‚ùå Erro ao cancelar:', error.response?.data?.erro || error.message);
        }
    }

    console.log('\n' + 'üéâ'.repeat(30));
    console.log('\n‚úÖ TESTE CONCLU√çDO!');
    console.log('\nüìã O QUE FOI TESTADO:');
    console.log('   ‚úì Login de usu√°rio existente');
    console.log('   ‚úì Cria√ß√£o de agendamento');
    console.log('   ‚úì Sistema de notifica√ß√µes autom√°ticas');
    console.log('   ‚úì Listagem de notifica√ß√µes');
    console.log('   ‚úì Cancelamento com notifica√ß√£o');
    
    console.log('\nüåê VERIFICA√á√ïES ADICIONAIS:');
    console.log('   ‚Ä¢ Backend rodando em: http://localhost:3001');
    console.log('   ‚Ä¢ Frontend rodando em: http://localhost:5173');
    console.log('   ‚Ä¢ Banco MySQL (Docker) na porta: 3307');
    console.log('   ‚Ä¢ Verifique logs do backend para detalhes das notifica√ß√µes');
}

// Executar teste
if (require.main === module) {
    testarNotificacoesSimples().catch(console.error);
}

module.exports = { testarNotificacoesSimples };
