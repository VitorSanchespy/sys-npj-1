/**
 * Script para criar usu√°rios de teste e testar o sistema de notifica√ß√µes
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

async function criarUsuarioTeste(dadosUsuario) {
    try {
        const response = await axios.post(`${BASE_URL}/api/usuarios`, dadosUsuario);
        console.log(`‚úÖ Usu√°rio criado: ${dadosUsuario.nome} (${dadosUsuario.email})`);
        return response.data;
    } catch (error) {
        if (error.response?.status === 409) {
            console.log(`‚ÑπÔ∏è  Usu√°rio j√° existe: ${dadosUsuario.email}`);
            return null;
        }
        console.error(`‚ùå Erro ao criar usu√°rio ${dadosUsuario.email}:`, error.response?.data?.erro || error.message);
        return null;
    }
}

async function login(credenciais) {
    try {
        const response = await axios.post(`${BASE_URL}/auth/login`, credenciais);
        console.log(`‚úÖ Login realizado: ${credenciais.email}`);
        return {
            token: response.data.token,
            user: response.data.user
        };
    } catch (error) {
        console.error(`‚ùå Erro no login ${credenciais.email}:`, error.response?.data?.erro || error.message);
        return null;
    }
}

async function criarAgendamento(token, dadosAgendamento) {
    try {
        const response = await axios.post(`${BASE_URL}/api/agendamentos`, dadosAgendamento, {
            headers: { Authorization: `Bearer ${token}` }
        });
        console.log(`‚úÖ Agendamento criado: ${dadosAgendamento.titulo}`);
        console.log(`   üìß Notifica√ß√µes devem ter sido enviadas!`);
        return response.data;
    } catch (error) {
        console.error(`‚ùå Erro ao criar agendamento:`, error.response?.data?.erro || error.message);
        return null;
    }
}

async function listarNotificacoes(token, nomeUsuario) {
    try {
        const response = await axios.get(`${BASE_URL}/api/notificacoes`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        console.log(`\nüì¨ Notifica√ß√µes para ${nomeUsuario}:`);
        if (response.data.length === 0) {
            console.log('   Nenhuma notifica√ß√£o encontrada');
        } else {
            response.data.slice(0, 5).forEach((notif, index) => {
                console.log(`   ${index + 1}. [${notif.tipo}] ${notif.titulo}: ${notif.mensagem}`);
            });
        }
        return response.data;
    } catch (error) {
        console.error(`‚ùå Erro ao listar notifica√ß√µes:`, error.response?.data?.erro || error.message);
        return [];
    }
}

async function testarSistemaCompleto() {
    console.log('üöÄ TESTANDO SISTEMA DE NOTIFICA√á√ïES DE AGENDAMENTOS');
    console.log('=' .repeat(70));

    // 1. Criar usu√°rios de teste
    console.log('\nüìù 1. Criando usu√°rios de teste...');
    
    const usuarios = [
        {
            nome: 'Admin Teste',
            email: 'admin.teste@npj.ufmt.br',
            senha: 'admin123',
            role_id: 1, // Admin
            telefone: '(65) 99999-0001'
        },
        {
            nome: 'Professor Jo√£o',
            email: 'joao.professor@npj.ufmt.br', 
            senha: 'prof123',
            role_id: 2, // Professor
            telefone: '(65) 99999-0002'
        },
        {
            nome: 'Aluna Maria',
            email: 'maria.aluna@npj.ufmt.br',
            senha: 'aluna123', 
            role_id: 3, // Aluno
            telefone: '(65) 99999-0003'
        }
    ];

    for (const usuario of usuarios) {
        await criarUsuarioTeste(usuario);
    }

    // 2. Fazer login com os usu√°rios
    console.log('\nüîê 2. Fazendo login com os usu√°rios...');
    
    const sessions = {};
    const credenciais = [
        { email: 'admin.teste@npj.ufmt.br', senha: 'admin123', nome: 'Admin' },
        { email: 'joao.professor@npj.ufmt.br', senha: 'prof123', nome: 'Professor' },
        { email: 'maria.aluna@npj.ufmt.br', senha: 'aluna123', nome: 'Aluna' }
    ];

    for (const cred of credenciais) {
        const session = await login({ email: cred.email, senha: cred.senha });
        if (session) {
            sessions[cred.nome.toLowerCase()] = session;
            console.log(`   ID: ${session.user.id}, Role: ${session.user.role?.nome || 'N/A'}`);
        }
    }

    if (Object.keys(sessions).length < 2) {
        console.error('‚ùå Falha nos logins. Teste abortado.');
        return;
    }

    console.log('\n' + '‚îÄ'.repeat(70));

    // 3. Cen√°rio 1: Professor criando agendamento para aluna
    console.log('\nüìÖ 3. CEN√ÅRIO: Professor criando agendamento para aluna');
    console.log('   üìß Esperado: Aluna recebe notifica√ß√£o + Professor recebe confirma√ß√£o');

    if (sessions.professor && sessions.aluna) {
        const agendamento = await criarAgendamento(sessions.professor.token, {
            usuario_id: sessions.aluna.user.id, // Para a aluna
            tipo_evento: 'reuniao',
            titulo: 'Orienta√ß√£o de TCC - Teste Notifica√ß√µes',
            descricao: 'Reuni√£o para discuss√£o do desenvolvimento do TCC',
            data_evento: '2025-08-15T14:00:00Z',
            local: 'Sala do Professor - Bloco A',
            lembrete_1_dia: true,
            lembrete_2_dias: true
        });

        if (agendamento) {
            console.log(`   üìã Agendamento criado com ID: ${agendamento.id}`);
            
            // Aguardar processamento das notifica√ß√µes
            console.log('   ‚è≥ Aguardando processamento das notifica√ß√µes...');
            await new Promise(resolve => setTimeout(resolve, 2000));

            // Verificar notifica√ß√µes da aluna
            console.log('\nüì¨ Verificando notifica√ß√µes da ALUNA:');
            await listarNotificacoes(sessions.aluna.token, 'Aluna Maria');

            // Verificar notifica√ß√µes do professor
            console.log('\nüì¨ Verificando notifica√ß√µes do PROFESSOR:');
            await listarNotificacoes(sessions.professor.token, 'Professor Jo√£o');
        }
    }

    console.log('\n' + '‚îÄ'.repeat(70));

    // 4. Cen√°rio 2: Admin criando agendamento para si mesmo
    console.log('\nüìÖ 4. CEN√ÅRIO: Admin criando agendamento para si mesmo');
    console.log('   üìß Esperado: Admin recebe apenas confirma√ß√£o');

    if (sessions.admin) {
        const agendamento2 = await criarAgendamento(sessions.admin.token, {
            tipo_evento: 'reuniao',
            titulo: 'Reuni√£o Administrativa - Teste',
            descricao: 'Reuni√£o de planejamento mensal',
            data_evento: '2025-08-20T10:00:00Z',
            local: 'Sala da Coordena√ß√£o',
            lembrete_1_dia: true
        });

        if (agendamento2) {
            console.log(`   üìã Agendamento criado com ID: ${agendamento2.id}`);
            
            // Aguardar e verificar notifica√ß√µes
            await new Promise(resolve => setTimeout(resolve, 1500));
            console.log('\nüì¨ Verificando notifica√ß√µes do ADMIN:');
            await listarNotificacoes(sessions.admin.token, 'Admin');
        }
    }

    console.log('\n' + 'üéâ'.repeat(35));
    console.log('\n‚úÖ TESTE COMPLETO FINALIZADO!');
    console.log('\nüìã VERIFICA√á√ïES REALIZADAS:');
    console.log('   ‚úì Cria√ß√£o de usu√°rios de teste');
    console.log('   ‚úì Autentica√ß√£o de m√∫ltiplos usu√°rios'); 
    console.log('   ‚úì Cria√ß√£o de agendamentos com notifica√ß√µes');
    console.log('   ‚úì Notifica√ß√µes para destinat√°rios diferentes');
    console.log('   ‚úì Confirma√ß√µes para criadores');
    console.log('   ‚úì Listagem de notifica√ß√µes por usu√°rio');
    
    console.log('\nüåê ACESSE TAMB√âM:');
    console.log('   ‚Ä¢ Backend: http://localhost:3001');
    console.log('   ‚Ä¢ Frontend: http://localhost:5173');
    console.log('   ‚Ä¢ Use as credenciais criadas para testar a interface web');
}

// Executar teste
if (require.main === module) {
    testarSistemaCompleto().catch(console.error);
}

module.exports = { testarSistemaCompleto };
